<webParts>
  <webPart xmlns="http://schemas.microsoft.com/WebPart/v3">
    <metaData>
      <type name="Microsoft.SharePoint.WebPartPages.ScriptEditorWebPart, Microsoft.SharePoint, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c" />
      <importErrorMessage>Cannot import this Web Part.</importErrorMessage>
    </metaData>
    <data>
      <properties>
        <property name="ExportMode" type="exportmode">All</property>
        <property name="HelpUrl" type="string" />
        <property name="Hidden" type="bool">False</property>
        <property name="Description" type="string" />
        <property name="Content" type="string">
          &lt;!--
          &lt;input type="text" name="question" id="questionpnp" /&gt;
          &lt;div id="my-taxonomypicker"&gt;&lt;/div&gt;
          &lt;input type="button" value="Post" onclick="postQuestionPNP();" &gt;
          &lt;div id="after-submit"&gt;&lt;/div&gt;
          --&gt;



          &lt;section class="ask-experts row"&gt;
          &lt;hr&gt;
          &lt;div class="row"&gt;
          &lt;div class="col-xs-12"&gt;
          &lt;span class="h1"&gt;Ask The Experts&lt;/span&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="row"&gt;
          &lt;div class="media"&gt;
          &lt;div class="media-left"&gt;
          &lt;div class="photo-box small"&gt;
          &lt;img src="http://placehold.it/60x60"&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="media-body"&gt;
          &lt;div class="form-group"&gt;
          &lt;textarea id="question" class="form-control expert-share" rows="1" placeholder="Share your question, and one of our experts will reply"&gt;&lt;/textarea&gt;
          &lt;div id="my-taxonomypicker"&gt;&lt;/div&gt;
          &lt;a class="add-topics"&gt;&lt;i class="fa fa-tag" aria-hidden="true"&gt;&lt;/i&gt;Add Topics&lt;/a&gt;
          &lt;div id="my-taxonomypicker"&gt;&lt;/div&gt;
          &lt;a href="#" onclick="postQuestionPNP();"class="btn pull-right"&gt;Post&lt;/a&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="row"&gt;
          &lt;div class="col-xs-12 col-md-11 col-md-offset-1"&gt;
          &lt;span class="h2"&gt;Recent Questions&lt;/span&gt;
          &lt;/div&gt;

          &lt;div class="col-xs-12 col-md-11 col-md-offset-1"&gt;
          &lt;div class="media"&gt;
          &lt;div class="media-left"&gt;
          &lt;div id="recent-question-image" class="photo-box small"&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="media-body"&gt;
          &lt;div id="recent-questions-placeholder" class="form-group"&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="row"&gt;
          &lt;div class="col-xs-12"&gt;
          &lt;a href="/sites/Knowledge/equestriancenter/Lists/AskTheExperts/AllItems.aspx" class="btn see-all"&gt;See All Q&amp;amp;A&lt;/a&gt;
          &lt;/div&gt;
          &lt;/div&gt;
          &lt;/section&gt;
          &lt;script&gt;
          $pnp.setup({  
              headers: {  
                  "Accept": "application/json; odata=verbose",  
              },  
          });

          function postQuestionPNP() {
          var termValue = $("#my-taxonomypicker_input").val();

          $pnp.sp.web.lists.getByTitle("Ask the Experts").items.add({
          Title: $("#question").val(),
          ContentTypeId: "0x01200200EB582FD82DA8D64383C5DE2CC93E9CD4",
          MOR_KnowledgeTagTaxHTField: termValue,
          IsQuestion: true
          });
          clearForm();
          }

          function clearForm(){
          $("#after-submit").text('Your Question has been Submitted');
          $("#question").val('');
          $("#my-taxonomypicker_pickereditableRegion").text('');
          };


          //////////////////////////////////////////////////////////////////////////////////////


          var taxonomyPickerHelper = taxonomyPickerHelper || {
          initPicker: function (containerId, termSetId) {
          // Create empty picker template and hidden input field
          var pickerContainerId = containerId + '_picker';
          var pickerInputId = containerId + '_input';

          var html = '&lt;input name="' + pickerInputId + '" type="hidden" id="';
          html += pickerInputId + '" /&gt;';
          html += '&lt;div id="' + pickerContainerId;
          html += '" class="ms-taxonomy ms-taxonomy-height ms-taxonomy-width"&gt;&lt;/div&gt;';

          jQuery('#' + containerId).html(html);

          //var link = document.getElementById('my-taxonomypicker_pickereditableRegion');
          //link.style.visibility = 'hidden';


          // Get Termstore ID and init control
          taxonomyPickerHelper.getTermStoreId().then(function (sspId) {
          taxonomyPickerHelper.initPickerControl(sspId, termSetId,
          pickerContainerId, pickerInputId);
          });
          },

          getSelectedValue: function (containerId) {
          return jQuery('#' + containerId + '_input').val();
          },

          getTermStoreId: function () {
          var deferred = jQuery.Deferred();

          var context = new SP.ClientContext.get_current();
          var session = SP.Taxonomy.TaxonomySession.getTaxonomySession(context);
          var termStore = session.getDefaultSiteCollectionTermStore();

          context.load(session);
          context.load(termStore);

          context.executeQueryAsync(
          function () {
          var sspId = termStore.get_id().toString();
          deferred.resolve(sspId);
          },
          function () {
          deferred.reject("Unable to access Managed Metadata Service");
          }
          );

          return deferred.promise();
          },

          initPickerControl: function (sspId, termSetId,
          pickerContainerId, pickerInputId) {
          var tagUI = document.getElementById(pickerContainerId);
          if (tagUI) {
          tagUI['InputFieldId'] = pickerInputId;
          tagUI['SspId'] = sspId;
          tagUI['TermSetId'] = termSetId;
          tagUI['AnchorId'] = '6b208c10-7883-44e4-9639-0e60f8a0bff6';
          tagUI['IsMulti'] = true;
          tagUI['AllowFillIn'] = false;
          tagUI['IsSpanTermSets'] = false;
          tagUI['IsSpanTermStores'] = false;
          tagUI['IsIgnoreFormatting'] = false;
          tagUI['IsIncludeDeprecated'] = false;
          tagUI['IsIncludeUnavailable'] = false;
          tagUI['IsIncludeTermSetName'] = false;
          tagUI['IsAddTerms'] = false;
          tagUI['IsIncludePathData'] = false;
          tagUI['IsUseCommaAsDelimiter'] = false;
          tagUI['Disable'] = false;
          tagUI['ExcludeKeyword'] = false;
          tagUI['JavascriptOnValidation'] = '';
          tagUI['DisplayPickerButton'] = true;
          tagUI['Lcid'] = 1033;
          tagUI['FieldName'] = '';
          tagUI['FieldId'] = '00000000-0000-0000-0000-000000000000';
          tagUI['WebServiceUrl'] = _spPageContextInfo.webServerRelativeUrl + '\u002f_vti_bin\u002fTaxonomyInternalService.json';

          SP.SOD.executeFunc('ScriptForWebTaggingUI.js',
          'Microsoft.SharePoint.Taxonomy.ScriptForWebTaggingUI.taggingLoad',
          function () {
          Microsoft.SharePoint.Taxonomy.ScriptForWebTaggingUI.resetEventsRegistered();
          }
          );

          SP.SOD.executeFunc('ScriptForWebTaggingUI.js',
          'Microsoft.SharePoint.Taxonomy.ScriptForWebTaggingUI.onLoad',
          function () {
          Microsoft.SharePoint.Taxonomy.ScriptForWebTaggingUI.onLoad(pickerContainerId);
          });
          }
          }
          };


          jQuery(document).ready(function () {
          $("#after-submit").text('');
          SP.SOD.loadMultiple(['sp.js'], function () {
          SP.SOD.registerSod('sp.taxonomy.js',
          SP.Utilities.Utility.getLayoutsPageUrl('sp.taxonomy.js'));
          SP.SOD.registerSod('scriptforwebtaggingui.js',
          SP.Utilities.Utility.getLayoutsPageUrl('scriptforwebtaggingui.js'));
          SP.SOD.registerSod('sp.ui.rte.js',
          SP.Utilities.Utility.getLayoutsPageUrl('sp.ui.rte.js'));
          SP.SOD.registerSod('scriptresources.resx',
          SP.Utilities.Utility.getLayoutsPageUrl('ScriptResx.ashx?culture=en-us&amp;name=ScriptResources'));

          // UNCOMMENT THIS FOR O365
          SP.SOD.registerSod('ms.rte.js',
          SP.Utilities.Utility.getLayoutsPageUrl('ms.rte.js'));

          // UNCOMMENT THIS FOR O365
          SP.SOD.loadMultiple(['ms.rte.js'], function () {
          SP.SOD.loadMultiple(['sp.taxonomy.js', 'sp.ui.rte.js',
          'scriptresources.resx'], function () {

          taxonomyPickerHelper.initPicker('my-taxonomypicker', '3450b5dd-3ed1-4ac1-8416-54e8175c8fc8');

          });
          });
          });
          });


          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          $(document).ready(function () {
          var values = [];
          var promises = [];
          var listItems = getListItems();

          jQuery.when(listItems).done(function(items){
          for(var i=0;i&lt;items.length;i++) {
          var user = getUserProperties(items[i]);
          promises.push(user);
          }
          jQuery.when.apply($, promises).then(function(){
          for(var i=0;i&lt;arguments.length;i++) {
          renderHtml(arguments[i]);
          }
          });
          });
          });
          function getListItems() {
          var deferred = jQuery.Deferred();
          var items = [];

          $pnp.sp.web.lists.getByTitle("Ask the Experts").items.orderBy("Created desc").top(3).get().then(function(data){
          for(var i=0;i&lt;data.length;i++) {
          items.push(data[i]);
          }
          deferred.resolve(items);
          });
          return deferred.promise();
          }
          function getUserProperties(authorId){
          var deferred = jQuery.Deferred();
          $pnp.sp.web.siteUsers.getById(authorId.AuthorId).get().then(function(data1){
          var loginName = data1.LoginName;
          $pnp.sp.profiles.getPropertiesFor(loginName).then(function (data2){
          var newObject = {};
          newObject = {
          authorId: authorId.AuthorId,
          accountName: data2.AccountName,
          created: authorId.Created,
          question: authorId.Title,
          name: data2.DisplayName,
          picture: data2.PictureUrl
          }
          deferred.resolve(newObject);
          });
          });
          return deferred.promise();
          }
          function renderHtml(newObject) {
          var createdDate = new Date(newObject.created);
          createdDate = moment(createdDate).calendar();

          var accountName = newObject.accountName;
          var accountNameArray = accountName.split("|");
          var accountEmail = accountNameArray[2];
          var accountPic = "/_layouts/15/userphoto.aspx?size=S&amp;accountname=" + accountEmail;

          htmlImage = '&lt;img src="' + accountPic + '"&gt;&lt;/img&gt;';
          $("#recent-question-image").append(htmlImage);

          html = '&lt;div class="form-group"&gt;';
          html += '&lt;span class="h4"&gt;' + newObject.name + '&lt;/span&gt;&lt;span&gt; -' + createdDate + '&lt;/span&gt;'
          html += '&lt;p&gt;' + newObject.question + '&lt;/p&gt;&lt;/div&gt;'
          $("#recent-questions-placeholder").append(html);
          }

          &lt;/script&gt;
        </property>
        <property name="CatalogIconImageUrl" type="string" />
        <property name="Title" type="string">Ask the Experts</property>
        <property name="AllowHide" type="bool">False</property>
        <property name="AllowMinimize" type="bool">False</property>
        <property name="AllowZoneChange" type="bool">True</property>
        <property name="TitleUrl" type="string" />
        <property name="ChromeType" type="chrometype">None</property>
        <property name="AllowConnect" type="bool">True</property>
        <property name="Width" type="unit" />
        <property name="Height" type="unit" />
        <property name="HelpMode" type="helpmode">Navigate</property>
        <property name="AllowEdit" type="bool">False</property>
        <property name="TitleIconImageUrl" type="string" />
        <property name="Direction" type="direction">NotSet</property>
        <property name="AllowClose" type="bool">False</property>
        <property name="ChromeState" type="chromestate">Normal</property>
      </properties>
    </data>
  </webPart>
</webParts>
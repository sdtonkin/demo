/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var app = angular.module('compassionIntranet', []).config(function ($sceDelegateProvider) {
	    $sceDelegateProvider.resourceUrlWhitelist([
	    // Allow same origin resource loads.
	    'self',
	    // Allow loading from our assets domain. **.
	    'https://api.rss2json.com/**']);
	});

	__webpack_require__(1);

	// Services
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);

	// System Components
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);

	// Components
	__webpack_require__(11);
	__webpack_require__(13);
	__webpack_require__(15);
	__webpack_require__(17);
	__webpack_require__(19);
	__webpack_require__(21);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';

	// set up static configuration entries
	var myApp = angular.module('compassionIntranet');

	//Discover Dev
	if (document.location.host === "compassion.sharepoint.com") {
	    if (document.location.pathname.toLowerCase().indexOf('/sites/dev') !== -1) {
	        myApp.constant('COM_CONFIG', {
	            isProduction: true,
	            msGraph: {
	                appId: '28057a7d-919d-49ba-a042-58c962b6ba40'
	            },
	            yammer: {
	                appId: '',
	                network: 'compassion.com',
	                defaultGroupId: ''
	            },
	            termSets: {
	                locationTermId: "af2b87f4-feae-42c3-a08d-70f9efae0f71",
	                eventCategoryTermId: "6f4ea56b-a45a-499d-9141-b75ed00e14c0",
	                newsCategoryTermId: "67235e27-f37f-4da6-a8e9-e23d6cabfb8f"
	            },
	            useCaching: false,
	            rootWeb: 'https://compassion.sharepoint.com/sites/dev',
	            rssProxyUrl: "https://api.rss2json.com/v1/api.json?rss_url=",
	            lists: {
	                rssFeedsListTitle: 'RSS Feeds',
	                userRssFeedsListTitle: 'User RSS Feeds',
	                userTools: 'User Tools',
	                toolbarTools: 'Toolbar Tools',
	                userBookmarks: 'User Bookmarks'
	            }
	        });
	    } else {
	        myApp.constant('COM_CONFIG', {
	            isProduction: true,
	            msGraph: {
	                appId: '28057a7d-919d-49ba-a042-58c962b6ba40'
	            },
	            yammer: {
	                appId: '',
	                network: 'compassion.com',
	                defaultGroupId: ''
	            },
	            termSets: {
	                locationTermId: "af2b87f4-feae-42c3-a08d-70f9efae0f71",
	                eventCategoryTermId: "6f4ea56b-a45a-499d-9141-b75ed00e14c0",
	                newsCategoryTermId: "67235e27-f37f-4da6-a8e9-e23d6cabfb8f"
	            },
	            useCaching: false,
	            rootWeb: 'https://compassion.sharepoint.com',
	            rssProxyUrl: "https://api.rss2json.com/v1/api.json?rss_url=",
	            lists: {
	                rssFeedsListTitle: 'RSS Feeds',
	                userRssFeedsListTitle: 'User RSS Feeds',
	                userTools: 'User Tools',
	                toolbarTools: 'Toolbar Tools',
	                userBookmarks: 'User Bookmarks'
	            }
	        });
	    }
	}
	//Dev Tenant
	else {
	        myApp.constant('COM_CONFIG', {
	            isProduction: false,
	            msGraph: {
	                appId: '1d622432-aff2-4037-862d-53c714949c02'
	            },
	            yammer: {
	                appId: '',
	                network: 'compassion.com',
	                defaultGroupId: ''
	            },
	            termSets: {
	                locationTermId: "af2b87f4-feae-42c3-a08d-70f9efae0f71",
	                eventCategoryTermId: "6f4ea56b-a45a-499d-9141-b75ed00e14c0",
	                newsCategoryTermId: "67235e27-f37f-4da6-a8e9-e23d6cabfb8f"
	            },
	            useCaching: false,
	            rootWeb: 'https://teganwilson.sharepoint.com/sites/compassion',
	            rssProxyUrl: "https://api.rss2json.com/v1/api.json?rss_url=",
	            lists: {
	                rssFeedsListTitle: 'RSS Feeds List',
	                userRssFeedsListTitle: 'User RSS Feeds',
	                userTools: 'User Tools',
	                toolbarTools: 'Toolbar Tools',
	                userBookmarks: 'User Bookmarks'
	            }
	        });
	    }

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('storage', ['common', function (common) {
	    var userId = _spPageContextInfo.userId;
	    var version = 1;
	    function set(key, value, expirationDuration) {
	        if (key != 'v') {
	            // apply userid to make sure storage item is user specific on public methods
	            key = key + userId;
	            value.expiration = expirationDuration === 0 ? 0 : moment().add(expirationDuration, 'hours');
	        }
	        try {
	            return localStorage.setItem(key, angular.toJson(value));
	        } catch (e) {
	            throw new Error('Storage set error for key: ' + key);
	        }
	    }
	    function get(key) {
	        try {
	            if (key != 'v') {
	                key = key + userId;
	                var item = angular.fromJson(localStorage.getItem(key));
	                if (item != null) item.isExpired = isItemExpired(key, item);
	                return item;
	            } else {
	                var item = angular.fromJson(localStorage.getItem(key));
	                return item;
	            }
	        } catch (e) {
	            throw new Error('Storage get error for key: ' + key);
	        }
	    }
	    function remove(key) {
	        key = key + userId;
	        return localStorage.removeItem(key);
	    }
	    function clearAll() {
	        localStorage.clear();
	    }
	    function isItemExpired(key, item) {
	        if (item == null) return false;else if (item.expiration === 0) return false;else if (moment(item.expiration) > moment()) {
	            remove(key);
	            return true;
	        } else return false;
	    }
	    /* Clear storage in old format */
	    if (get('v') !== version) {
	        localStorage.clear();
	        set('v', version);
	    }

	    return {
	        get: get,
	        set: set,
	        remove: remove,
	        clearAll: clearAll
	    };
	}]);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    angular.module('compassionIntranet').factory('modalService', Service);

	    function Service() {
	        var modals = []; // array of modals on the page
	        var service = {};

	        service.Add = Add;
	        service.Remove = Remove;
	        service.Open = Open;
	        service.Close = Close;

	        return service;

	        function Add(modal) {
	            // add modal to array of active modals
	            modals.push(modal);
	        }

	        function Remove(id) {
	            // remove modal from array of active modals
	            var modalToRemove = _.findWhere(modals, { id: id });
	            modals = _.without(modals, modalToRemove);
	        }

	        function Open(id) {
	            // open modal specified by id
	            var modal = _.findWhere(modals, { id: id });
	            modal.open();
	        }

	        function Close(id) {
	            // close modal specified by id
	            var modal = _.findWhere(modals, { id: id });
	            modal.close();
	        }
	    }
	})();

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('rssFeedService', ['$http', '$q', 'COM_CONFIG', function ($http, $q, COM_CONFIG) {
	    function getRssItems(user) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userRssFeedsListTitle).items.filter("COM_RssFeedUserId eq '" + user + "'").get().then(function (data) {
	            var promises = new Array();
	            for (var i = 0; data.length > i; i++) {
	                var p = getRssUrl(data[i].Id);
	                promises.push(p);
	            }
	            $q.all(promises).then(function (response) {
	                defer.resolve(response);
	            });
	        });

	        return defer.promise;
	    }
	    function getRssUrl(id) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.rssFeedsListTitle).items.getById(id).get().then(function (item) {
	            var f = {};
	            f.title = item.Title;
	            f.url = item.COM_RssFeedUrl.Url;
	            defer.resolve(f);
	        });

	        return defer.promise;
	    }
	    function getRssFeeds(feeds) {
	        var defer = $q.defer(),
	            promises = [];
	        for (var i = 0; feeds.length > i; i++) {
	            var p = getRssFeed(feeds[i]);
	            promises.push(p);
	        }
	        $q.all(promises).then(function (response) {
	            defer.resolve(response);
	        });
	        return defer.promise;
	    }
	    function getRssFeed(feed) {
	        var defer = $q.defer();

	        $http.jsonp(COM_CONFIG.rssProxyUrl + encodeURIComponent(feed.url)).then(function (response) {
	            if (!response.data) {
	                console.error('Unable to fetch RSS feed from provided URL. Please check the URL.');
	            }
	            var feeds = _.sortBy(response.data.items, function (item) {
	                return item.pubDate;
	            }).reverse();

	            for (var i = 0; i < feeds.length; ++i) {
	                var f = feeds[i];
	                f.feedTitle = feed.title;
	                f.pDate = moment().utc(f.pubDate);
	                f.publishedDate = moment(f.pubDate);
	                f.currentTime = moment.utc().format();
	                f.publishedSpanString = getPublishedDurationString(f.pubDate);
	            }

	            defer.resolve(feeds);
	        });
	        return defer.promise;
	    }
	    function getPublishedDurationString(then) {
	        var ms = moment.utc().diff(moment.utc(then));
	        var d = moment.duration(ms);
	        var t = {};
	        t.hour = d.asHours();
	        t.hourFormat = Math.floor(d.asHours());
	        t.minute = moment.utc(ms).format('m');

	        if (t.hour > 0) {
	            var h = Math.floor(t.hour);
	            return h + 'h';
	        } else if (t.minute == '0') return '';else return t.minute + 'm';

	        return t;
	    }

	    this.getMyRssFeeds = function (user, articleLimit) {
	        var defer = $q.defer();
	        getRssItems(user).then(function (feeds) {
	            getRssFeeds(feeds).then(function (feedContent) {
	                var feedList = [];
	                for (var i = 0; feedContent.length > i; i++) {
	                    var f = {};
	                    f.title = feedContent[i][0].feedTitle;
	                    f.articles = feedContent[i].slice(0, articleLimit);
	                    feedList.push(f);
	                }
	                defer.resolve(feedList);
	            });
	        });

	        return defer.promise;
	    };
	}]);

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('appsService', ['$http', '$q', 'COM_CONFIG', 'storage', 'common', function ($http, $q, COM_CONFIG, storage, common) {
	    var ctrl = this;
	    var userToolsKey = 'F6FC1D32-0D5B-4FA3-A283-4F0839B34FF8' + _spPageContextInfo.userId;

	    // clear local storage if url param is detected
	    checkForClearStatement();
	    // ensure Promise for pnp is loaded prior to using pnp module
	    ES6Promise.polyfill();

	    // set default expiration at 24 hours
	    ctrl.expirationDuration = 24;
	    ctrl.getMyTools = function (userId) {
	        var defer = $q.defer();
	        getUserToolItems(userId).then(function (tools) {
	            defer.resolve(tools);
	        });
	        return defer.promise;
	    };
	    ctrl.getAllTools = function () {
	        var defer = $q.defer();
	        getTools().then(function (tools) {
	            defer.resolve(tools);
	        });
	        return defer.promise;
	    };
	    ctrl.addMyTool = function (userId, toolId) {
	        var defer = $q.defer();
	        addUserTool(userId, toolId).then(function (tools) {
	            storage.remove(userToolsKey);
	            defer.resolve(tools);
	        });
	        return defer.promise;
	    };
	    ctrl.updateUserTool = function (userTool) {
	        var defer = $q.defer();
	        updateUserTool(userTool).then(function (data) {
	            storage.remove(userToolsKey);
	            defer.resolve(data);
	        });
	        return defer.promise;
	    };
	    ctrl.removeMyTool = function (id) {
	        var defer = $q.defer();
	        deleteUserTool(id).then(function (tools) {
	            storage.remove(userToolsKey);
	            defer.resolve(tools);
	        });
	        return defer.promise;
	    };
	    function getUserToolItems(userId) {
	        var defer = $q.defer();
	        var local = storage.get(userToolsKey);
	        if (local == null) {
	            local = {};
	            local.isExpired = true;
	        }
	        if (!local.isExpired) defer.resolve(local);else {
	            var web = new $pnp.Web(COM_CONFIG.rootWeb);
	            web.lists.getByTitle(COM_CONFIG.lists.userTools).items.filter("COM_ToolbarUser eq '" + userId + "'").get().then(function (data) {
	                var promises = new Array();
	                for (var i = 0; data.length > i; i++) {
	                    var p = getUserTool(data[i]);
	                    promises.push(p);
	                }
	                $q.all(promises).then(function (response) {
	                    response = formatAppTools(response);
	                    storage.set(userToolsKey, response, 0);
	                    defer.resolve(response);
	                });
	            });
	        }

	        return defer.promise;
	    }
	    function getUserTool(userTool) {
	        var defer = $q.defer();
	        getTool(userTool.COM_UserToolbarId).then(function (t) {
	            t.toolId = t.id;
	            t.id = userTool.Id;
	            t.sortOrder = userTool.COM_ListSortOrder;
	            defer.resolve(t);
	        });
	        return defer.promise;
	    }
	    function getTool(toolId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.toolbarTools).items.getById(toolId).get().then(function (item) {
	            var f = {};
	            f.id = item.Id;
	            f.title = item.Title;
	            f.url = item.COM_ToolbarUrl.Url;
	            f.iconUrl = item.COM_ToolbarIconUrl.Url;
	            f.sortOrder = item.COM_ListSortOrder;
	            defer.resolve(f);
	        });

	        return defer.promise;
	    }
	    function getTools() {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.toolbarTools).items.get().then(function (items) {
	            var tools = [];
	            for (var i = 0; items.length > i; i++) {
	                var item = items[i];
	                var t = {};
	                t.id = item.Id;
	                t.title = item.Title;
	                t.url = item.COM_ToolbarUrl.Url;
	                t.iconUrl = item.COM_ToolbarIconUrl.Url;
	                t.sortOrder = item.COM_ListSortOrder;

	                tools.push(t);
	            }
	            defer.resolve(tools);
	        });

	        return defer.promise;
	    }
	    function addUserTool(userId, toolId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userTools).items.add({
	            COM_ToolbarUserId: userId,
	            COM_UserToolbarId: toolId
	        }).then(function (item) {
	            defer.resolve(item.Id);
	        });

	        return defer.promise;
	    }
	    function updateUserTool(userTool) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        $pnp.sp.web.lists.getByTitle(COM_CONFIG.lists.userTools).items.getById(userTool.id).update({
	            COM_ListSortOrder: userTool.sortOrder
	        }).then(function (r) {
	            defer.resolve(r);
	        });
	        return defer.promise;
	    }
	    function deleteUserTool(userToolId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userTools).items.getById(userToolId).delete().then(function (item) {
	            defer.resolve(true);
	        });

	        return defer.promise;
	    }
	    function checkForClearStatement() {
	        if (common.getUrlParamByName('clearMyTools') == 'true') storage.remove(userToolsKey);
	    }
	    function formatAppTools(apps) {
	        var nullSortOrder = _.findIndex(apps, function (a) {
	            return a.sortOrder == null;
	        }) != -1;
	        for (var i = 0; i < apps.length; i++) {
	            var app = apps[i];
	            if (app.sortOrder == null) {
	                nullSortOrder = true;
	                apps[i].sortOrder = i + 1;
	            } else if (nullSortOrder) apps[i].sortOrder = i + 1;
	        }
	        return _.sortBy(apps, 'sortOrder');
	    }
	}]);

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	//import pnp from "sp-pnp-js";
	//import { Web } from "sp-pnp-js/lib/sharepoint/webs";
	'use strict';

	angular.module('compassionIntranet').service('bookmarkService', ['$http', '$q', 'COM_CONFIG', 'storage', 'common', function ($http, $q, COM_CONFIG, storage, common) {
	    var ctrl = this;
	    var userBookmarkKey = 'E5A445DB-8D84-4DC5-AFE4-779DCC86AED6' + _spPageContextInfo.userId;

	    // clear local storage if url param is detected
	    checkForClearStatement();
	    // ensure Promise for pnp is loaded prior to using pnp module
	    ES6Promise.polyfill();

	    // set default expiration at 24 hours
	    ctrl.expirationDuration = 24;
	    ctrl.getMyBookmarks = function (userId) {
	        var defer = $q.defer();
	        getUserBookmarkItems(userId).then(function (bookmarks) {
	            var bks = [];
	            for (var i = 0; i < bookmarks.length; i++) {
	                var b = bookmarks[i];
	                var bk = {};
	                bk.id = b.Id;
	                bk.title = b.Title;
	                bk.url = b.COM_BookmarkUrl;
	                bk.userId = b.COM_ToolbarUserId;
	                bks.push(bk);
	            }
	            defer.resolve(bks);
	        });
	        return defer.promise;
	    };
	    ctrl.addMyBookmark = function (userId, title, url) {
	        var defer = $q.defer();
	        addUserBookmark(userId, title, url).then(function (bookmark) {
	            storage.remove(userBookmarkKey);
	            defer.resolve(bookmark);
	        });
	        return defer.promise;
	    };
	    ctrl.updateUserBookmark = function (userTool) {
	        var defer = $q.defer();
	        updateUserTool(userTool).then(function (data) {
	            storage.remove(userToolsKey);
	            defer.resolve(data);
	        });
	        return defer.promise;
	    };
	    ctrl.removeMyBookmark = function (id) {
	        var defer = $q.defer();
	        deleteUserTool(id).then(function (tools) {
	            storage.remove(userToolsKey);
	            defer.resolve(tools);
	        });
	        return defer.promise;
	    };
	    function getUserBookmarkItems(userId) {
	        var defer = $q.defer();
	        var local = storage.get(userBookmarkKey);
	        if (local == null) {
	            local = {};
	            local.isExpired = true;
	        }
	        if (!local.isExpired) defer.resolve(local);else {
	            var web = new $pnp.Web(COM_CONFIG.rootWeb);
	            web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.filter("COM_ToolbarUser eq '" + userId + "'").get().then(function (data) {
	                defer.resolve(data);
	            });
	        }
	        return defer.promise;
	    }
	    function addUserBookmark(userId, title, url) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.add({
	            COM_ToolbarUserId: userId,
	            COM_BookmarkUrl: url,
	            Title: title
	        }).then(function (item) {
	            defer.resolve(item.Id);
	        });

	        return defer.promise;
	    }
	    function updateUserTool(userId, title, url) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        $pnp.sp.web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.getById(userBookmark.id).update({
	            COM_ToolbarUserId: userId,
	            COM_BookmarkUrl: url,
	            Title: title
	        }).then(function (r) {
	            defer.resolve(r);
	        });
	        return defer.promise;
	    }
	    function deleteUserTool(userBookmarkId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.getById(userBookmarkId).delete().then(function (item) {
	            defer.resolve(true);
	        });
	        return defer.promise;
	    }
	    function checkForClearStatement() {
	        if (common.getUrlParamByName('clearMyBookmarks') == 'true') storage.remove(userBookmarkKey);
	    }
	    function formatAppTools(apps) {
	        var nullSortOrder = _.findIndex(apps, function (a) {
	            return a.sortOrder == null;
	        }) != -1;
	        for (var i = 0; i < apps.length; i++) {
	            var app = apps[i];
	            if (app.sortOrder == null) {
	                nullSortOrder = true;
	                apps[i].sortOrder = i + 1;
	            } else if (nullSortOrder) apps[i].sortOrder = i + 1;
	        }
	        return _.sortBy(apps, 'sortOrder');
	    }
	}]);

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('documentService', ['$http', '$q', 'COM_CONFIG', function ($http, $q, COM_CONFIG) {
	    function getMyDocuments(user) {
	        var defer = $q.defer();
	        $pnp.sp.search({
	            Querytext: 'Author: "' + user + '" OR ModifiedBy: "' + user + '"',
	            RowLimit: 10,
	            EnableInterleaving: true,
	            RefinementFilters: ['fileExtension:equals("txt")'],
	            SelectProperties: ['Title', 'FileDirRef', 'EncodedAbsUrl', 'Author', 'ModifiedBy']
	        }).then(function (results) {
	            console.log(results);
	        });

	        return defer.promise;
	    }

	    this.getMyDocuments = function (user) {
	        var defer = $q.defer();
	        getMyDocuments(user).then(function (results) {
	            defer.resolve(results);
	        });

	        return defer.promise;
	    };
	}]);

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	'use strict';

	var myApp = angular.module('compassionIntranet');

	myApp.factory('common', ['COM_CONFIG', function (COM_CONFIG) {
	    return {
	        existsInArray: function existsInArray(item, list) {
	            if (item === null || list === null) return false;
	            var item = _.find(list, function (i) {
	                return i.id == item.id;
	            });
	            return item != null;
	        },
	        existsIdInArray: function existsIdInArray(id, list) {
	            if (id === null || list === null) return false;
	            var item = _.find(list, function (i) {
	                return i.id == id;
	            });
	            return item != null;
	        },
	        getUrlParamByName: function getUrlParamByName(name) {
	            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
	            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
	            var results = regex.exec(location.search);
	            return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
	        }
	        /*
	        isLocalStorageSupported: function () {
	            Modernizr.addTest('localstorage', function () {
	                var mod = 'modernizr';
	                try {
	                    localStorage.setItem(mod, mod);
	                    localStorage.removeItem(mod);
	                    return true;
	                } catch (e) {
	                    return false;
	                }
	            });
	        }
	        */
	    };
	}]);

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    angular.module('compassionIntranet').directive('modal', Directive);

	    function Directive(modalService) {
	        return {
	            link: function link(scope, element, attrs) {
	                // ensure id attribute exists
	                if (!attrs.id) {
	                    console.error('modal must have an id');
	                    return;
	                }

	                // move element to bottom of page (just before </body>) so it can be displayed above everything else
	                $(element).appendTo('body');

	                // close modal on background click
	                $(element).on('click', function (e) {
	                    var target = $(e.target);
	                    if (!target.closest('.modal-body').length) {
	                        scope.$evalAsync(Close);
	                    }
	                });

	                // add self (this modal instance) to the modal service so it's accessible from controllers
	                var modal = {
	                    id: attrs.id,
	                    open: Open,
	                    close: Close
	                };
	                modalService.Add(modal);

	                // remove self from modal service when directive is destroyed
	                scope.$on('$destroy', function () {
	                    modalService.Remove(attrs.id);
	                    $(element).remove();
	                });

	                // open modal
	                function Open() {
	                    $(element).show();
	                    $(element).addClass('modal-open');
	                }

	                // close modal
	                function Close() {
	                    $(element).hide();
	                    $(element).removeClass('modal-open');
	                }
	            }
	        };
	    }
	})();

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'uiHelper',
	    firstNameId = 'ci-user-first-name';

	myApp.controller(controllerName, ['$scope', 'COM_CONFIG', function ($scope, COM_CONFIG) {
	    var userDisplayName = _spPageContextInfo.userDisplayName,
	        userId = _spPageContextInfo.userId;
	    var userFirstName = getFirstName(userDisplayName);
	    var userLastName = getLastName(userDisplayName);
	    //Setup Responsive Variables
	    var isMobile = "",
	        isTablet = "",
	        isDesktop = "";

	    $scope.init = function () {
	        addFirstNameToWelcomeMessage(userFirstName);
	        $(window).resize(processWindowSize);
	        processWindowSize();
	    };
	    //check window size and setup functions
	    function processWindowSize() {
	        var ua = window.navigator.userAgent;
	        var msie = ua.indexOf("MSIE");

	        if (msie > 0) // If Internet Explorer
	            {
	                var width = window.innerWidth;
	            } else // If another browser
	            {
	                var width = $(window).width();
	            }

	        if (width >= 991) {
	            isMobile = false;
	            isTablet = false;
	            isDesktop = true;
	        } else if (width >= 768) {
	            isTablet = true;
	        } else {
	            isMobile = true;
	            isTablet = false;
	            isDesktop = false;
	        }

	        //setup functions that need to be ran on resize
	        rightRailHeight();
	    } //processWindowSize
	    function rightRailHeight() {
	        setTimeout(function () {
	            /* not sure what $rightRail is...ask Bartke
	            $rightRail = $('.main-right-rail');
	            $rightRailInitial = $rightRail.height();
	            //RESET HEIGHT BEFORE SETTING SO THAT CONTAINER DOESNT INCLUDE IT.
	              if (isDesktop === true) {
	                var mainContainerHeight = $('.main-left-content').outerHeight(true);
	                if ($rightRailInitial < mainContainerHeight) {
	                    $rightRail.css('height', mainContainerHeight);
	                } else {
	                    $rightRail.css('height', $rightRailInitial);
	                }
	            } else {
	                $rightRail.css('height', '');
	                $rightRail.css('height', 'auto');
	            }
	            */
	        }, 2000);
	    }
	    function addFirstNameToWelcomeMessage(firstName) {
	        $('#' + firstNameId).text(firstName);
	    }
	    function getFirstName(fullName) {
	        var names = fullName.split(' ');
	        if (names.length > 0) return names[0];else return '';
	    }
	    function getLastName(fullName) {
	        var names = fullName.split(' ');
	        if (names.length > 1) return names[1];else return '';
	    }
	}]);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'myRssFeedsCtrl';

	myApp.controller(controllerName, ['$scope', 'rssFeedService', 'COM_CONFIG', function ($scope, rssFeedService, COM_CONFIG) {
	    this.$onInit = function () {
	        var userId = _spPageContextInfo.userId;
	        var articleLimit = $scope.ctrl.articlelimit;
	        rssFeedService.getMyRssFeeds(userId, articleLimit).then(function (response) {
	            $scope.myFeeds = response;
	        });
	    };
	}]).component('myRssFeeds', {
	    template: __webpack_require__(12),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    bindings: {
	        articlelimit: '@'
	    }
	});

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	module.exports = "<div>My RSS Feeds</div>\r\n<div ng-repeat=\"item in myFeeds\">\r\n    <h3>{{ item.title }}</h3>\r\n    <ul ng-repeat=\"article in item.articles\">\r\n        <li>\r\n            <a href=\"{{ article.guid }}\">{{ article.title }}</a>\r\n            <div>{{ article.publishedSpanString }}</div>         \r\n        </li>\r\n    </ul>\r\n</div>";

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'toolbarCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'modalService', 'appsService', 'bookmarkService', 'COM_CONFIG', function ($scope, common, modalService, appsService, bookmarkService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    var isToolbarDirty = false;
	    ctrl.myTools = [];
	    ctrl.myToolsFromDb = [];
	    ctrl.toolbarSelectorId = 'ci-toolbar-selector', ctrl.toolbarContainerId = 'ci-toolbar-container', ctrl.toolbarContentClassName = 'toolbar-content';

	    ctrl.selectedTabId = 'ci-apps';
	    this.$onInit = function () {
	        appsService.getMyTools(userId).then(function (response) {
	            ctrl.myToolsFromDb = response;
	            ctrl.myTools = angular.copy(response);
	        });
	        bookmarkService.getMyBookmarks(userId).then(function (response) {
	            ctrl.myBookmarks = angular.copy(response);
	            ctrl.myBookmarksFromDb = response;
	        });
	    };
	    ctrl.select = function (tabId) {
	        if (ctrl.selectedTabId === tabId) return;
	        ctrl.selectedTabId = tabId;
	    };
	}]).component('myToolbar', {
	    template: __webpack_require__(14),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	module.exports = "<section id=\"ci-toolbar-container\">\r\n    <div id=\"ci-toolbar\" class=\"row\">\r\n        <div class=\"col-xs-8 col-xs-offset-2\">\r\n            <ul id=\"ci-toolbar-selector\">\r\n                <li ng-class=\"{active:ctrl.isSelected('ci-apps')}\">\r\n                    <a ng-click=\"ctrl.select('ci-apps')\" href=\"javascript: void(0);\">apps + tools</a>\r\n                </li>\r\n                <li ng-class=\"{active:ctrl.isSelected('ci-documents')}\">\r\n                    <a ng-click=\"ctrl.select('ci-documents')\" href=\"javascript: void(0);\">documents</a>\r\n                </li>\r\n                <li ng-class=\"{active:ctrl.isSelected('ci-bookmarks')}\">\r\n                    <a ng-click=\"ctrl.select('ci-bookmarks')\" href=\"javascript: void(0);\">bookmarks</a>\r\n                </li>\r\n                <li ng-class=\"{active:ctrl.isSelected('ci-sites')}\">\r\n                    <a ng-click=\"ctrl.select('ci-sites')\" href=\"javascript: void(0);\">project sites</a>\r\n                </li>\r\n            </ul>\r\n            <div class=\"toolbar-content\" id=\"ci-apps\" ng-show=\"ctrl.selectedTabId == 'ci-apps'\">\r\n                <my-apps></my-apps>\r\n            </div>\r\n            <div class=\"toolbar-content\" id=\"ci-documents\" ng-show=\"ctrl.selectedTabId == 'ci-documents'\">\r\n                <h3>Recent Documents</h3>\r\n                <my-documents></my-documents>\r\n            </div>\r\n            <div class=\"toolbar-content\" id=\"ci-bookmarks\" ng-show=\"ctrl.selectedTabId == 'ci-bookmarks'\">\r\n                <my-bookmarks></my-bookmarks>\r\n            </div>\r\n            <div class=\"toolbar-content\" id=\"ci-sites\" ng-show=\"ctrl.selectedTabId == 'ci-sites'\">\r\n                <ul>\r\n                    <li><a>site 1</a></li>\r\n                </ul>\r\n            </div>            \r\n        </div>\r\n        <div class=\"col-xs-8 col-xs-offset-2\">\r\n            <toolbar-manager></toolbar-manager>\r\n        </div>\r\n    </div>\r\n</section>";

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'bookmarkCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'modalService', 'bookmarkService', 'COM_CONFIG', function ($scope, common, modalService, bookmarkService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    var isDirty = false;

	    ctrl.openModal = openModal;
	    ctrl.closeModal = closeModal;
	    ctrl.saveMyBookmarks = saveMyBookmarks;
	    ctrl.removeMyBookmark = removeMyBookmark;
	    ctrl.enableSaveButton = function () {
	        if (isDirty) $scope.systemMessage = '';
	        return !isDirty;
	    };
	    ctrl.updateSortOrder = updateSortOrder;
	    this.$onInit = function () {
	        bookmarkService.getMyBookmarks(userId).then(function (response) {
	            $scope.myBookmarks = angular.copy(response);
	            $scope.myBookmarksFromDb = response;
	            getSortOrderLimits();
	        });
	    };
	    function updateSortOrder(bookmark, oldOrder) {
	        isDirty = true;
	        var bookmarks = $scope.myBookmarks;
	        var newOrder = bookmark.sortOrder;
	        if (oldOrder < newOrder) {
	            for (var i = oldOrder - 1; i < newOrder; i++) {
	                var t = bookmarks[i];
	                if (i == oldOrder - 1) {
	                    bookmarks[i].sortOrder = bookmark.sortOrder;
	                } else if (i == newOrder - 1) {
	                    bookmarks[i].sortOrder = t.sortOrder - 1;
	                } else {
	                    bookmarks[i].sortOrder = t.sortOrder - 1;
	                }
	            }
	        } else if (newOrder < oldOrder) {
	            for (var i = newOrder - 1; i < oldOrder; i++) {
	                var t = bookmarks[i];
	                if (i == newOrder - 1) {
	                    bookmarks[i].sortOrder = t.sortOrder + 1;
	                } else if (i == oldOrder - 1) {
	                    bookmarks[i].sortOrder = bookmark.sortOrder;
	                } else {
	                    bookmarks[i].sortOrder = t.sortOrder + 1;
	                }
	            }
	        }
	        $scope.myBookmarks = _.sortBy(bookmarks, 'sortOrder');
	    }
	    function saveMyBookmarksSortOrder() {
	        for (var i = 0; i < $scope.myBookmarks.length; i++) {
	            var bk = $scope.myBookmarks[i];
	            bookmarkService.updateUserBookmark(bk);
	        }
	        $scope.myBookmarksFromDb = angular.copy($scope.myBookmarks);
	        isDirty = false;
	        $scope.systemMessage = 'Success';
	    }
	    function removeMyBookmark(bookmark) {
	        bookmarkService.removeMyBookmark(bookmark.id).then(function (response) {
	            console.log(response);
	            $scope.myBookmarks = angular.copy(response);
	            $scope.myBookmarksFromDb = response;
	            getSortOrderLimits();
	        });
	    }
	    function saveMyBookmarks() {
	        var bookmarks = $scope.myBookmarks;
	        var dbBookmarks = $scope.myBookmarksFromDb;
	        var bookmarksToAdd = _.where(bookmarks, { id: -1 });
	        var fullBookmarks = _.filter(bookmarks, function (t) {
	            return t.id != -1;
	        });
	        var bookmarksToDelete = _.difference(fullBookmarks, bookmarks);

	        for (var i = 0; i < bookmarksToAdd.length; i++) {
	            var bk = bookmarksToAdd[i];
	            bookmarkService.addMyBookmark(bk);
	        }
	        for (var i = 0; i < bookmarksToDelete.length; i++) {
	            var bk = bookmarksToDelete[i];
	            bookmarkService.removeMyBookmark(bk.id);
	        }
	        bookmarkService.getMyBookmarks(userId).then(function (response) {
	            $scope.myBookmarks = response;
	            $scope.myBookmarksFromDb = angular.copy(response);
	            getSortOrderLimits();
	            isDirty = false;
	            $scope.systemMessage = 'Success';
	        });
	    }
	    function getSortOrderLimits() {
	        var count = $scope.myBookmarks.length;
	        var response = [];
	        for (var i = 1; i <= count; i++) {
	            response.push(i);
	        }
	        $scope.myBookmarksSortList = response;
	    }
	    function openModal(id) {
	        modalService.Open(id);
	    }
	    function closeModal(id) {
	        modalService.Close(id);
	    }
	}]).component('myBookmarks', {
	    template: __webpack_require__(16),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	module.exports = "<ul ng-repeat=\"bk in myBookmarks track by bk.id\">\r\n    <li>\r\n        <a ng-href=\"{{ bk.url }}\">\r\n            <div>{{ bk.title }}</div>                        \r\n        </a>                    \r\n    </li>\r\n</ul>\r\n    ";

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'myAppsCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'appsService', 'COM_CONFIG', function ($scope, common, appsService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    var isToolbarDirty = false;

	    $scope.$parent.$watch('ctrl', function (newVal, oldVal, scope) {
	        ctrl.myTools = newVal.myTools;
	        ctrl.myToolsFromDb = newVal.myToolsFromDb;
	    });
	    this.$onInit = function () {
	        ctrl.myTools = $scope.$parent.ctrl.myTools;
	    };
	}]).component('myApps', {
	    template: __webpack_require__(18),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    require: {
	        parent: '^myToolbar'
	    }
	});

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	module.exports = "<ul ng-repeat=\"tool in ctrl.myTools\">\r\n    <li>\r\n        <a ng-href=\"{{ tool.iconUrl }}\">\r\n            <img ng-src=\"{{ tool.iconUrl }}\" />\r\n            <div>{{ tool.title }}</div>\r\n        </a>\r\n    </li>\r\n</ul>";

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'myDocumentsCtrl';

	myApp.controller(controllerName, ['$scope', 'documentService', 'COM_CONFIG', function ($scope, documentService, COM_CONFIG) {
	    var userId = _spPageContextInfo.userId,
	        userDisplayName = _spPageContextInfo.userDisplayName;

	    this.$onInit = function () {
	        documentService.getMyDocuments(userDisplayName).then(function (response) {
	            ctrl.myDocuments = response;
	        });
	    };
	}]).component('myDocuments', {
	    template: __webpack_require__(20),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = "<ul>\r\n    <li ng-repeat=\"doc in ctrl.myDocuments\">\r\n        <a ng-href=\"{{ doc.url }}\">\r\n            <div>{{ doc.title }}</div>\r\n        </a>\r\n    </li>\r\n</ul>";

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'toolbarManagerCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'modalService', 'appsService', 'bookmarkService', 'COM_CONFIG', function ($scope, common, modalService, appsService, bookmarkService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    ctrl.isToolbarDirty = false;

	    $scope.$parent.$watch('ctrl.myTools', function (newVal, oldVal, scope) {
	        if (newVal == null) return;
	        ctrl.myTools = newVal;
	        ctrl.myToolsFromDb = scope.ctrl.myToolsFromDb;
	        getSortOrderLimits();
	    });
	    $scope.$parent.$watch('ctrl.myBookmarks', function (newVal, oldVal, scope) {
	        if (newVal == null) return;
	        ctrl.myBookmarks = newVal;
	        ctrl.myBookmarksFromDb = scope.ctrl.myBookmarksFromDb;
	    });
	    ctrl.newBookmark = {};
	    ctrl.newBookmark.url = '';
	    ctrl.newBookmark.title = '';
	    ctrl.openModal = openModal;
	    ctrl.closeModal = closeModal;
	    ctrl.saveMyTools = saveMyTools;
	    ctrl.openManageModal = openManageModal;
	    ctrl.saveMyToolsSortOrder = saveMyToolsSortOrder;
	    ctrl.updateSortOrder = updateSortOrder;
	    ctrl.saveMyBookmark = saveMyBookmark;
	    ctrl.enableAddNew = false;
	    ctrl.addMyBookmark = function () {
	        ctrl.enableAddNew = true;
	    };
	    ctrl.enableSaveButton = function () {
	        if (ctrl.isToolbarDirty) $scope.systemMessage = '';
	        return !ctrl.isToolbarDirty;
	    };

	    this.$onInit = function () {
	        ctrl.myTools = $scope.$parent.ctrl.myTools;
	        appsService.getAllTools().then(function (response) {
	            ctrl.allTools = response;
	        });
	    };
	    $scope.myToolsSortList = [];
	    $scope.existsToolMyTools = function (toolId) {
	        if (!toolId) return false;
	        var item = _.find(ctrl.myTools, function (i) {
	            return i.toolId == toolId;
	        });
	        return item != null;
	    };
	    $scope.toggleSelection = function (id) {
	        ctrl.isToolbarDirty = true;
	        var item = _.find(ctrl.myTools, function (i) {
	            return i.toolId == id;
	        });
	        if (item == null) {
	            var tool = _.find(ctrl.allTools, function (i) {
	                return i.id == id;
	            });
	            tool.toolId = tool.id;
	            tool.id = -1;
	            ctrl.myTools.push(tool);
	        } else {
	            var currentTools = ctrl.myTools;
	            ctrl.myTools = _.without(currentTools, _.findWhere(currentTools, {
	                toolId: id
	            }));
	        }
	    };

	    function updateSortOrder(tool, oldOrder) {
	        ctrl.isToolbarDirty = true;
	        var tools = ctrl.myTools;
	        var newOrder = tool.sortOrder;
	        if (oldOrder < newOrder) {
	            for (var i = oldOrder - 1; i < newOrder; i++) {
	                var t = tools[i];
	                if (i == oldOrder - 1) {
	                    tools[i].sortOrder = tool.sortOrder;
	                } else if (i == newOrder - 1) {
	                    tools[i].sortOrder = t.sortOrder - 1;
	                } else {
	                    tools[i].sortOrder = t.sortOrder - 1;
	                }
	            }
	        } else if (newOrder < oldOrder) {
	            for (var i = newOrder - 1; i < oldOrder; i++) {
	                var t = tools[i];
	                if (i == newOrder - 1) {
	                    tools[i].sortOrder = t.sortOrder + 1;
	                } else if (i == oldOrder - 1) {
	                    tools[i].sortOrder = tool.sortOrder;
	                } else {
	                    tools[i].sortOrder = t.sortOrder + 1;
	                }
	            }
	        }
	        ctrl.myTools = _.sortBy(tools, 'sortOrder');
	    }
	    function saveMyToolsSortOrder() {
	        for (var i = 0; i < ctrl.myTools.length; i++) {
	            var tool = ctrl.myTools[i];
	            appsService.updateUserTool(tool);
	        }
	        ctrl.myToolsFromDb = ctrl.myTools;
	        ctrl.isToolbarDirty = false;
	        ctrl.systemMessage = 'Success';
	    }
	    function saveMyBookmark() {
	        var title = ctrl.newBookmark.title;
	        var url = ctrl.newBookmark.url;
	        bookmarkService.addMyBookmark(userId, title, url).then(function (data) {
	            ctrl.enableAddNew = false;
	            ctrl.isToolbarDirty = false;
	            ctrl.systemMessage = 'Success adding bookmark';
	            var newBookmark = {};
	            newBookmark.title = title;
	            newBookmark.url = url;
	            $scope.$parent.ctrl.myBookmarks.push(newBookmark);
	        });
	    }
	    function saveMyTools() {
	        var tools = ctrl.myTools;
	        var dbTools = ctrl.myToolsFromDb;
	        var toolsToAdd = _.where(tools, { id: -1 });
	        var fullTools = _.filter(tools, function (t) {
	            return t.id != -1;
	        });
	        var toolsToDelete = _.difference(fullTools, tools);

	        for (var i = 0; i < toolsToAdd.length; i++) {
	            var tool = toolsToAdd[i];
	            appsService.addMyTool(userId, tool.toolId);
	        }
	        for (var i = 0; i < toolsToDelete.length; i++) {
	            var tool = toolsToDelete[i];
	            appsService.removeMyTool(tool.id);
	        }
	        appsService.getMyTools(userId).then(function (response) {
	            ctrl.myToolsFromDb = response;
	            ctrl.myTools = angular.copy(response);
	            getSortOrderLimits();
	            ctrl.isToolbarDirty = false;
	            ctrl.systemMessage = 'Success';
	        });
	    }
	    function getSortOrderLimits() {
	        if (ctrl.myTools == null) return;
	        var myToolsCount = ctrl.myTools.length;
	        var response = [];
	        for (var i = 1; i <= myToolsCount; i++) {
	            response.push(i);
	        }
	        $scope.myToolsSortList = response;
	    }
	    function openManageModal() {
	        var selectedTablId = $scope.$parent.ctrl.selectedTabId;
	        modalService.Open(selectedTablId + '-manage');
	    }
	    function openModal(id) {
	        modalService.Open(id);
	    }
	    function closeModal(id) {
	        modalService.Close(id);
	    }
	}]).component('toolbarManager', {
	    template: __webpack_require__(22),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    require: {
	        parent: '^myToolbar'
	    }
	});

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	module.exports = "<div><a ng-click=\"ctrl.openManageModal()\">Manage</a></div>\r\n<modal id=\"ci-apps-manage\">\r\n    <div class=\"modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Manage My Tools</h1>\r\n            <h3>Available Tools</h3>\r\n            <ul>\r\n                <li ng-repeat=\"tool in ctrl.allTools track by tool.id\">\r\n                    <input type=\"checkbox\" ng-click=\"toggleSelection(tool.id)\" value=\"{{tool.id}}\" ng-checked=\"existsToolMyTools(tool.id)\" />{{tool.title}}\r\n                </li>\r\n            </ul>\r\n\r\n            <button ng-click=\"ctrl.saveMyTools();\" ng-disabled=\"ctrl.enableSaveButton();\">Save</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-apps-manage'); ctrl.openModal('ci-apps-manage-sort');\">Edit Sort Order</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-apps-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>\r\n<modal id=\"ci-apps-manage-sort\">\r\n    <div class=\"modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Manage My Tools Sort Order</h1>\r\n            <ul>\r\n                <li ng-repeat=\"tool in ctrl.myTools track by tool.id\">\r\n                    {{tool.title}}\r\n                    <select ng-model=\"tool.sortOrder\" ng-change=\"ctrl.updateSortOrder(tool, {{tool.sortOrder}});\">\r\n                        <option ng-repeat=\"sort in myToolsSortList\" ng-value=\"{{sort}}\">{{sort}}</option>\r\n                    </select>\r\n                </li>\r\n            </ul>\r\n\r\n            <button ng-click=\"ctrl.saveMyToolsSortOrder();\" ng-disabled=\"ctrl.enableSaveButton();\">Save</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-apps-manage-sort'); ctrl.openModal('ci-apps-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>\r\n<modal id=\"ci-bookmarks-manage\">\r\n    <div class=\"modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Manage My Bookmarks</h1>\r\n            <ul>\r\n                <li ng-repeat=\"bk in ctrl.myBookmarks track by bk.id\">\r\n                    <input type=\"text\" ng-model=\"bk.title\" />\r\n                    <input type=\"text\" ng-model=\"bk.url\" />\r\n                    <i class=\"fa fa-minus-circle\" aria-hidden=\"true\" ng-click=\"alert('hi')\"></i>\r\n                    <a ng-click=\"ctrl.removeMyBookmark(bk);\">Delete</a>\r\n                </li>\r\n            </ul>\r\n            <div ng-show=\"ctrl.enableAddNew\">\r\n                <label for=\"bookmark-title\">Title</label>\r\n                <input type=\"text\" id=\"bookmark-title\" ng-model=\"ctrl.newBookmark.title\" ng-change=\"ctrl.isToolbarDirty = true\" />\r\n                <label for=\"bookmark-url\">Bookmark Url</label>\r\n                <input type=\"text\" id=\"bookmark-url\" ng-model=\"ctrl.newBookmark.url\" ng-change=\"ctrl.isToolbarDirty = true\" />\r\n                <button ng-click=\"ctrl.saveMyBookmark();\" ng-disabled=\"ctrl.enableSaveButton()\">Save</button>\r\n            </div>\r\n            \r\n            <button ng-click=\"ctrl.addMyBookmark();\">Add New</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-bookmarks-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>";

/***/ })
/******/ ]);
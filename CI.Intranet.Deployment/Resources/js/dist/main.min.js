/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var app = angular.module('compassionIntranet', []).config(function ($sceDelegateProvider) {
	    $sceDelegateProvider.resourceUrlWhitelist([
	    // Allow same origin resource loads.
	    'self',
	    // Allow loading from our assets domain. **.
	    'https://api.rss2json.com/**']);
	});

	__webpack_require__(1);
	__webpack_require__(2);

	// Services
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);

	// System Components

	__webpack_require__(13);
	__webpack_require__(14);

	// Components
	__webpack_require__(15);
	__webpack_require__(17);
	__webpack_require__(19);
	__webpack_require__(21);
	__webpack_require__(23);
	__webpack_require__(25);
	__webpack_require__(27);
	__webpack_require__(29);
	__webpack_require__(31);
	__webpack_require__(33);
	__webpack_require__(35);
	__webpack_require__(37);
	__webpack_require__(39);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';

	// set up static configuration entries
	var myApp = angular.module('compassionIntranet');

	//Discover Dev
	if (document.location.host === "compassion.sharepoint.com") {
	    if (document.location.pathname.toLowerCase().indexOf('/sites/dev') !== -1) {
	        myApp.constant('COM_CONFIG', {
	            isProduction: true,
	            msGraph: {
	                appId: '28057a7d-919d-49ba-a042-58c962b6ba40'
	            },
	            yammer: {
	                appId: '',
	                network: 'compassion.com',
	                defaultGroupId: ''
	            },
	            termSets: {
	                locationTermId: "af2b87f4-feae-42c3-a08d-70f9efae0f71",
	                eventCategoryTermId: "6f4ea56b-a45a-499d-9141-b75ed00e14c0",
	                newsCategoryTermId: "67235e27-f37f-4da6-a8e9-e23d6cabfb8f"
	            },
	            useCaching: false,
	            rootWeb: 'https://compassion.sharepoint.com/sites/dev',
	            rssProxyUrl: "https://api.rss2json.com/v1/api.json?rss_url=",
	            lists: {
	                rssFeedsListTitle: 'RSS Feeds',
	                userRssFeedsListTitle: 'User RSS Feeds',
	                userApps: 'User Tools',
	                toolbarApps: 'Toolbar Tools',
	                userBookmarks: 'User Bookmarks',
	                groupInfo: 'Group Info',
	                groupLeadership: 'Contacts',
	                navigation: 'Navigation'
	            }
	        });
	    } else {
	        myApp.constant('COM_CONFIG', {
	            isProduction: true,
	            msGraph: {
	                appId: '28057a7d-919d-49ba-a042-58c962b6ba40'
	            },
	            yammer: {
	                appId: '',
	                network: 'compassion.com',
	                defaultGroupId: ''
	            },
	            termSets: {
	                locationTermId: "af2b87f4-feae-42c3-a08d-70f9efae0f71",
	                eventCategoryTermId: "6f4ea56b-a45a-499d-9141-b75ed00e14c0",
	                newsCategoryTermId: "67235e27-f37f-4da6-a8e9-e23d6cabfb8f"
	            },
	            useCaching: false,
	            rootWeb: 'https://compassion.sharepoint.com',
	            rssProxyUrl: "https://api.rss2json.com/v1/api.json?rss_url=",
	            lists: {
	                rssFeedsListTitle: 'RSS Feeds',
	                userRssFeedsListTitle: 'User RSS Feeds',
	                userApps: 'User Tools',
	                toolbarApps: 'Toolbar Tools',
	                userBookmarks: 'User Bookmarks',
	                groupInfo: 'Group Info',
	                groupLeadership: 'Contacts',
	                navigation: 'Navigation'
	            }
	        });
	    }
	}
	//Dev Tenant
	else {
	        myApp.constant('COM_CONFIG', {
	            isProduction: false,
	            msGraph: {
	                appId: '1d622432-aff2-4037-862d-53c714949c02'
	            },
	            yammer: {
	                appId: '',
	                network: 'compassion.com',
	                defaultGroupId: ''
	            },
	            termSets: {
	                locationTermId: "af2b87f4-feae-42c3-a08d-70f9efae0f71",
	                eventCategoryTermId: "6f4ea56b-a45a-499d-9141-b75ed00e14c0",
	                newsCategoryTermId: "67235e27-f37f-4da6-a8e9-e23d6cabfb8f"
	            },
	            useCaching: false,
	            rootWeb: 'https://teganwilson.sharepoint.com/sites/compassion',
	            rssProxyUrl: "https://api.rss2json.com/v1/api.json?rss_url=",
	            lists: {
	                rssFeedsListTitle: 'RSS Feeds',
	                userRssFeedsListTitle: 'User RSS Feeds',
	                userApps: 'User Tools',
	                toolbarApps: 'Toolbar Tools',
	                userBookmarks: 'User Bookmarks',
	                groupInfo: 'Group Info',
	                groupLeadership: 'Contacts',
	                navigation: 'Navigation'
	            }
	        });
	    }

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';

	var myApp = angular.module('compassionIntranet');

	myApp.factory('common', ['COM_CONFIG', function (COM_CONFIG) {
	    return {
	        existsInArray: function existsInArray(item, list) {
	            if (item === null || list === null) return false;
	            var item = _.find(list, function (i) {
	                return i.id == item.id;
	            });
	            return item != null;
	        },
	        existsIdInArray: function existsIdInArray(id, list) {
	            if (id === null || list === null) return false;
	            var item = _.find(list, function (i) {
	                return i.id == id;
	            });
	            return item != null;
	        },
	        getUrlParamByName: function getUrlParamByName(name) {
	            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
	            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
	            var results = regex.exec(location.search);
	            return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
	        },
	        isURL: function isURL(str) {
	            var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
	            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' + // domain name
	            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
	            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
	            '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
	            '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
	            return pattern.test(str);
	        },
	        checkForClearStatement: function checkForClearStatement(command, storageKey) {
	            if (this.getUrlParamByName(command) == 'true') localStorage.removeItem(storageKey);
	        }
	        /*
	        isLocalStorageSupported: function () {
	            Modernizr.addTest('localstorage', function () {
	                var mod = 'modernizr';
	                try {
	                    localStorage.setItem(mod, mod);
	                    localStorage.removeItem(mod);
	                    return true;
	                } catch (e) {
	                    return false;
	                }
	            });
	        }
	        */
	    };
	}]);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('storage', ['common', function (common) {
	    var version = 1;
	    function set(key, value, expirationDuration) {
	        if (key != 'v') {
	            // apply userid to make sure storage item is user specific on public methods
	            key = key;
	            value.expiration = expirationDuration === 0 ? 0 : moment().add(expirationDuration, 'hours');
	        }
	        try {
	            return localStorage.setItem(key, angular.toJson(value));
	        } catch (e) {
	            throw new Error('Storage set error for key: ' + key);
	        }
	    }
	    function get(key) {
	        try {
	            if (key != 'v') {
	                key = key;
	                var item = angular.fromJson(localStorage.getItem(key));
	                if (item != null) item.isExpired = isItemExpired(key, item);
	                return item;
	            } else {
	                var item = angular.fromJson(localStorage.getItem(key));
	                return item;
	            }
	        } catch (e) {
	            throw new Error('Storage get error for key: ' + key);
	        }
	    }
	    function remove(key) {
	        return localStorage.removeItem(key);
	    }
	    function clearAll() {
	        localStorage.clear();
	    }
	    function isItemExpired(key, item) {
	        if (item == null) return false;else if (item.expiration === 0) return false;else if (moment(item.expiration) > moment()) {
	            remove(key);
	            return true;
	        } else return false;
	    }
	    /* Clear storage in old format */
	    if (get('v') !== version) {
	        localStorage.clear();
	        set('v', version);
	    }

	    return {
	        get: get,
	        set: set,
	        remove: remove,
	        clearAll: clearAll
	    };
	}]);

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').factory('modalService', Service);

	function Service() {
	    var modals = []; // array of modals on the page
	    var service = {};

	    service.Add = Add;
	    service.Remove = Remove;
	    service.Open = Open;
	    service.Close = Close;

	    return service;

	    function Add(modal) {
	        // add modal to array of active modals
	        modals.push(modal);
	    }

	    function Remove(id) {
	        // remove modal from array of active modals
	        var modalToRemove = _.findWhere(modals, { id: id });
	        modals = _.without(modals, modalToRemove);
	    }

	    function Open(id) {
	        // open modal specified by id
	        var modal = _.findWhere(modals, { id: id });
	        modal.open();
	    }

	    function Close(id) {
	        // close modal specified by id
	        var modal = _.findWhere(modals, { id: id });
	        modal.close();
	    }
	}

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('rssFeedService', ['$http', '$q', 'COM_CONFIG', function ($http, $q, COM_CONFIG) {
	    function getRssItems(user) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userRssFeedsListTitle).items.filter("COM_RssFeedUserId eq '" + user + "'").get().then(function (data) {
	            var promises = new Array();
	            for (var i = 0; data.length > i; i++) {
	                var p = getRssUrl(data[i]);
	                promises.push(p);
	            }
	            $q.all(promises).then(function (response) {
	                defer.resolve(response);
	            });
	        });

	        return defer.promise;
	    }
	    function getRssUrl(feed) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.rssFeedsListTitle).items.getById(feed.COM_RssFeedId).get().then(function (item) {
	            var f = {};
	            f.title = item.Title;
	            f.url = item.COM_RssFeedUrl.Url;
	            f.feedId = item.Id;
	            f.id = feed.Id;
	            defer.resolve(f);
	        });

	        return defer.promise;
	    }
	    function getAllRssFeeds() {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.rssFeedsListTitle).items.get().then(function (items) {
	            var feeds = [];
	            for (var i = 0; i < items.length; i++) {
	                var item = items[i];
	                var f = {};
	                f.id = item.Id;
	                f.title = item.Title;
	                f.url = item.COM_RssFeedUrl.Url;
	                feeds.push(f);
	            }
	            defer.resolve(feeds);
	        });

	        return defer.promise;
	    }
	    function getRssFeeds(feeds) {
	        var defer = $q.defer(),
	            promises = [];
	        for (var i = 0; feeds.length > i; i++) {
	            var p = getRssFeed(feeds[i]);
	            promises.push(p);
	        }
	        $q.all(promises).then(function (response) {
	            defer.resolve(response);
	        });
	        return defer.promise;
	    }
	    function getRssFeed(feed) {
	        var defer = $q.defer();

	        $http.jsonp(COM_CONFIG.rssProxyUrl + encodeURIComponent(feed.url)).then(function (response) {
	            if (!response.data) {
	                console.error('Unable to fetch RSS feed from provided URL. Please check the URL.');
	            }
	            var feeds = _.sortBy(response.data.items, function (item) {
	                return item.pubDate;
	            }).reverse();

	            for (var i = 0; i < feeds.length; ++i) {
	                var f = feeds[i];
	                f.feedId = feed.feedId;
	                f.feedTitle = feed.title;
	                f.id = feed.id;
	                f.pDate = moment().utc(f.pubDate);
	                f.publishedDate = moment(f.pubDate);
	                f.currentTime = moment.utc().format();
	                f.publishedSpanString = getPublishedDurationString(f.pubDate);
	            }

	            defer.resolve(feeds);
	        });
	        return defer.promise;
	    }
	    function getPublishedDurationString(then) {
	        var ms = moment.utc().diff(moment.utc(then));
	        var d = moment.duration(ms);
	        var t = {};
	        t.hour = d.asHours();
	        t.hourFormat = Math.floor(d.asHours());
	        t.minute = moment.utc(ms).format('m');

	        if (t.hour > 0) {
	            var h = Math.floor(t.hour);
	            return h + 'h';
	        } else if (t.minute == '0') return '';else return t.minute + 'm';

	        return t;
	    }
	    function deleteMyFeed(id) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userRssFeedsListTitle).items.getById(id).delete().then(function (item) {
	            defer.resolve(true);
	        });

	        return defer.promise;
	    }
	    function addMyFeed(userId, feedId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userRssFeedsListTitle).items.add({
	            COM_RssFeedUserId: userId,
	            COM_RssFeedId: feedId
	        }).then(function (item) {
	            defer.resolve(item);
	        });

	        return defer.promise;
	    }
	    this.getMyRssFeeds = function (user, articleLimit) {
	        var defer = $q.defer();
	        getRssItems(user).then(function (feeds) {
	            getRssFeeds(feeds).then(function (feedContent) {
	                var feedList = [];
	                for (var i = 0; feedContent.length > i; i++) {
	                    var f = {};
	                    f.title = feedContent[i][0].feedTitle;
	                    f.feedId = feedContent[i][0].feedId;
	                    f.id = feedContent[i][0].id;
	                    f.articles = feedContent[i].slice(0, articleLimit);
	                    feedList.push(f);
	                }
	                defer.resolve(feedList);
	            });
	        });

	        return defer.promise;
	    };
	    this.getAllRssFeeds = function () {
	        var defer = $q.defer();
	        getAllRssFeeds().then(function (feeds) {
	            defer.resolve(feeds);
	        });

	        return defer.promise;
	    };
	    this.addMyFeed = function (userId, feedId) {
	        var defer = $q.defer();
	        addMyFeed(userId, feedId).then(function (response) {
	            defer.resolve(response.data.Id);
	        });

	        return defer.promise;
	    };
	    this.removeMyFeed = function (id) {
	        var defer = $q.defer();
	        deleteMyFeed(id).then(function (feeds) {
	            defer.resolve(feeds);
	        });

	        return defer.promise;
	    };
	}]);

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('appService', ['$http', '$q', 'COM_CONFIG', 'storage', 'common', function ($http, $q, COM_CONFIG, storage, common) {
	    var ctrl = this;
	    var userAppsKey = 'F6FC1D32-0D5B-4FA3-A283-4F0839B34FF8' + _spPageContextInfo.userId;

	    // clear local storage if url param is detected
	    checkForClearStatement();
	    // ensure Promise for pnp is loaded prior to using pnp module
	    ES6Promise.polyfill();

	    // set default expiration at 24 hours
	    ctrl.expirationDuration = 24;
	    ctrl.getMyApps = function (userId) {
	        var defer = $q.defer();
	        getUserAppItems(userId).then(function (apps) {
	            defer.resolve(apps);
	        });
	        return defer.promise;
	    };
	    ctrl.getAllApps = function () {
	        var defer = $q.defer();
	        getApps().then(function (apps) {
	            defer.resolve(apps);
	        });
	        return defer.promise;
	    };
	    ctrl.addMyApp = function (userId, appId) {
	        var defer = $q.defer();
	        addUserApp(userId, appId).then(function (apps) {
	            storage.remove(userAppsKey);
	            defer.resolve(apps);
	        });
	        return defer.promise;
	    };
	    ctrl.updateUserApp = function (userApp) {
	        var defer = $q.defer();
	        updateUserApp(userApp).then(function (data) {
	            storage.remove(userAppsKey);
	            defer.resolve(data);
	        });
	        return defer.promise;
	    };
	    ctrl.removeMyApp = function (id) {
	        var defer = $q.defer();
	        deleteUserApp(id).then(function (apps) {
	            storage.remove(userAppsKey);
	            defer.resolve(apps);
	        });
	        return defer.promise;
	    };
	    function getUserAppItems(userId) {
	        var defer = $q.defer();
	        var local = storage.get(userAppsKey);
	        if (local == null) {
	            local = {};
	            local.isExpired = true;
	        }
	        if (!local.isExpired) defer.resolve(local);else {
	            var web = new $pnp.Web(COM_CONFIG.rootWeb);
	            web.lists.getByTitle(COM_CONFIG.lists.userApps).items.filter("COM_ToolbarUser eq '" + userId + "'").get().then(function (data) {
	                var promises = new Array();
	                for (var i = 0; data.length > i; i++) {
	                    var p = getUserApp(data[i]);
	                    promises.push(p);
	                }
	                $q.all(promises).then(function (response) {
	                    response = formatAppApps(response);
	                    storage.set(userAppsKey, response, 0);
	                    defer.resolve(response);
	                });
	            });
	        }

	        return defer.promise;
	    }
	    function getUserApp(userApp) {
	        var defer = $q.defer();
	        getApp(userApp.COM_UserToolbarId).then(function (t) {
	            t.appId = t.id;
	            t.id = userApp.Id;
	            t.sortOrder = userApp.COM_ListSortOrder;
	            defer.resolve(t);
	        });
	        return defer.promise;
	    }
	    function getApp(appId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.toolbarApps).items.getById(appId).get().then(function (item) {
	            var f = {};
	            f.id = item.Id;
	            f.title = item.Title;
	            f.url = item.COM_ToolbarUrl.Url;
	            f.iconUrl = item.COM_ToolbarIconUrl.Url;
	            f.sortOrder = item.COM_ListSortOrder;
	            defer.resolve(f);
	        });

	        return defer.promise;
	    }
	    function getApps() {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.toolbarApps).items.get().then(function (items) {
	            var apps = [];
	            for (var i = 0; items.length > i; i++) {
	                var item = items[i];
	                var t = {};
	                t.id = item.Id;
	                t.title = item.Title;
	                t.url = item.COM_ToolbarUrl.Url;
	                t.iconUrl = item.COM_ToolbarIconUrl.Url;
	                t.sortOrder = item.COM_ListSortOrder;

	                apps.push(t);
	            }
	            defer.resolve(apps);
	        });

	        return defer.promise;
	    }
	    function addUserApp(userId, appId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userApps).items.add({
	            COM_ToolbarUserId: userId,
	            COM_UserToolbarId: appId
	        }).then(function (item) {
	            defer.resolve(item.Id);
	        });

	        return defer.promise;
	    }
	    function updateUserApp(userApp) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        $pnp.sp.web.lists.getByTitle(COM_CONFIG.lists.userApps).items.getById(userApp.id).update({
	            COM_ListSortOrder: userApp.sortOrder
	        }).then(function (r) {
	            defer.resolve(r);
	        });
	        return defer.promise;
	    }
	    function deleteUserApp(userAppId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userApps).items.getById(userAppId).delete().then(function (item) {
	            defer.resolve(true);
	        });

	        return defer.promise;
	    }
	    function checkForClearStatement() {
	        if (common.getUrlParamByName('clearMyApps') == 'true') storage.remove(userAppsKey);
	    }
	    function formatAppApps(apps) {
	        var nullSortOrder = _.findIndex(apps, function (a) {
	            return a.sortOrder == null;
	        }) != -1;
	        for (var i = 0; i < apps.length; i++) {
	            var app = apps[i];
	            if (app.sortOrder == null) {
	                nullSortOrder = true;
	                apps[i].sortOrder = i + 1;
	            } else if (nullSortOrder) apps[i].sortOrder = i + 1;
	        }
	        return _.sortBy(apps, 'sortOrder');
	    }
	}]);

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	//import pnp from "sp-pnp-js";
	//import { Web } from "sp-pnp-js/lib/sharepoint/webs";
	'use strict';

	angular.module('compassionIntranet').service('bookmarkService', ['$http', '$q', 'COM_CONFIG', 'storage', 'common', function ($http, $q, COM_CONFIG, storage, common) {
	    var ctrl = this;
	    var userBookmarkKey = 'E5A445DB-8D84-4DC5-AFE4-779DCC86AED6' + _spPageContextInfo.userId;

	    // clear local storage if url param is detected
	    checkForClearStatement();
	    // ensure Promise for pnp is loaded prior to using pnp module
	    ES6Promise.polyfill();

	    // set default expiration at 24 hours
	    ctrl.expirationDuration = 24;
	    ctrl.getMyBookmarks = function (userId) {
	        var defer = $q.defer();
	        getUserBookmarkItems(userId).then(function (bookmarks) {
	            var bks = [];
	            for (var i = 0; i < bookmarks.length; i++) {
	                var b = bookmarks[i];
	                var bk = {};
	                bk.id = b.Id;
	                bk.title = b.Title;
	                bk.url = b.COM_BookmarkUrl;
	                bk.userId = b.COM_ToolbarUserId;
	                bks.push(bk);
	            }
	            defer.resolve(bks);
	        });
	        return defer.promise;
	    };
	    ctrl.addMyBookmark = function (userId, title, url) {
	        var defer = $q.defer();
	        addUserBookmark(userId, title, url).then(function (bookmark) {
	            storage.remove(userBookmarkKey);
	            defer.resolve(bookmark);
	        });
	        return defer.promise;
	    };
	    ctrl.updateUserBookmark = function (userTool) {
	        var defer = $q.defer();
	        updateUserTool(userTool).then(function (data) {
	            storage.remove(userBookmarkKey);
	            defer.resolve(data);
	        });
	        return defer.promise;
	    };
	    ctrl.removeMyBookmark = function (id) {
	        var defer = $q.defer();
	        deleteUserTool(id).then(function (tools) {
	            storage.remove(userBookmarkKey);
	            defer.resolve(tools);
	        });
	        return defer.promise;
	    };
	    function getUserBookmarkItems(userId) {
	        var defer = $q.defer();
	        var local = storage.get(userBookmarkKey);
	        if (local == null) {
	            local = {};
	            local.isExpired = true;
	        }
	        if (!local.isExpired) defer.resolve(local);else {
	            var web = new $pnp.Web(COM_CONFIG.rootWeb);
	            web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.filter("COM_ToolbarUser eq '" + userId + "'").get().then(function (data) {
	                defer.resolve(data);
	            });
	        }
	        return defer.promise;
	    }
	    function addUserBookmark(userId, title, url) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.add({
	            COM_ToolbarUserId: userId,
	            COM_BookmarkUrl: url,
	            Title: title
	        }).then(function (item) {
	            var bk = {};
	            bk.id = item.data.Id;
	            bk.title = item.data.Title;
	            bk.url = item.data.COM_BookmarkUrl;
	            bk.userId = item.data.COM_ToolbarUserId;
	            defer.resolve(bk);
	        });

	        return defer.promise;
	    }
	    function updateUserTool(userBookmark) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        $pnp.sp.web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.getById(userBookmark.id).update({
	            COM_ToolbarUserId: userBookmark.userId,
	            COM_BookmarkUrl: userBookmark.url,
	            Title: userBookmark.title
	        }).then(function (r) {
	            defer.resolve(r);
	        });
	        return defer.promise;
	    }
	    function deleteUserTool(userBookmarkId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.getById(userBookmarkId).delete().then(function (item) {
	            defer.resolve(true);
	        });
	        return defer.promise;
	    }
	    function checkForClearStatement() {
	        if (common.getUrlParamByName('clearMyBookmarks') == 'true') storage.remove(userBookmarkKey);
	    }
	    function formatAppTools(apps) {
	        var nullSortOrder = _.findIndex(apps, function (a) {
	            return a.sortOrder == null;
	        }) != -1;
	        for (var i = 0; i < apps.length; i++) {
	            var app = apps[i];
	            if (app.sortOrder == null) {
	                nullSortOrder = true;
	                apps[i].sortOrder = i + 1;
	            } else if (nullSortOrder) apps[i].sortOrder = i + 1;
	        }
	        return _.sortBy(apps, 'sortOrder');
	    }
	}]);

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('documentService', ['$http', '$q', 'COM_CONFIG', function ($http, $q, COM_CONFIG) {
	    function getMyDocuments(user) {
	        var defer = $q.defer();
	        $pnp.sp.search({
	            Querytext: 'Author: "' + user + '" OR ModifiedBy: "' + user + '"',
	            RowLimit: 10,
	            EnableInterleaving: true,
	            RefinementFilters: ['fileExtension:equals("txt")'],
	            SelectProperties: ['Title', 'FileDirRef', 'EncodedAbsUrl', 'Author', 'ModifiedBy']
	        }).then(function (results) {
	            console.log(results);
	        });

	        return defer.promise;
	    }

	    this.getMyDocuments = function (user) {
	        var defer = $q.defer();
	        getMyDocuments(user).then(function (results) {
	            defer.resolve(results);
	        });

	        return defer.promise;
	    };
	}]);

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('groupService', ['$http', '$q', 'COM_CONFIG', 'common', 'storage', function ($http, $q, COM_CONFIG, common, storage) {
	    var ctrl = this;
	    var groupsKey = '4FC856F1-CCF7-49C8-9971-22861DE3EB56' + _spPageContextInfo.userId;

	    var delveUrl = '';
	    // clear local storage if url param is detected
	    common.checkForClearStatement('clearGroups', groupsKey);
	    // ensure Promise for pnp is loaded prior to using pnp module
	    ES6Promise.polyfill();

	    // set default expiration at 24 hours
	    ctrl.expirationDuration = 24;
	    ctrl.getGroups = function () {
	        var defer = $q.defer();
	        var local = storage.get(groupsKey);
	        if (local == null) {
	            local = {};
	            local.isExpired = true;
	        }
	        if (!local.isExpired) defer.resolve(local);else {
	            defer.resolve(getGroups());
	        }

	        return defer.promise;
	    };
	    function getGroups() {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.groupInfo).items.get().then(function (data) {
	            var groups = [];
	            var promises = [];
	            var items = data;
	            for (var i = 0; i < items.length; i++) {
	                var item = items[i];
	                var g = {};
	                g.id = item.Id;
	                g.name = item.Title;
	                g.url = item.COM_GroupSiteUrl.Url;
	                g.description = item.COM_GroupDescription;
	                g.profileUrl = delveUrl;
	                groups.push(g);
	                promises.push(getGroupLeadership(g.url, item.Id));
	            }
	            try {
	                $q.all(promises).then(function (response) {
	                    for (var i = 0; i < groups.length; i++) {
	                        var id = groups[i].id;
	                        groups[i].leaders = _.find(response, function (l) {
	                            return l.groupId == id;
	                        }).leaders;
	                    }

	                    storage.set(groupsKey, groups, 0);
	                    defer.resolve(groups);
	                });
	            } catch (e) {
	                defer.resolve(groups);
	            }
	        });

	        return defer.promise;
	    }
	    function getGroupLeadership(siteUrl, groupId) {
	        var defer = $q.defer();
	        var picUrlTemplate = '/_layouts/15/userphoto.aspx?size=S&username=';
	        var web = new $pnp.Web(siteUrl);
	        web.lists.getByTitle(COM_CONFIG.lists.groupLeadership).items.select('Title', 'COM_Contact/Title', 'COM_Contact/UserName', 'COM_Contact/JobTitle').expand('COM_Contact').get().then(function (data) {
	            var leaders = [];
	            var groupLeaders = [];
	            var groupLeader = {};
	            groupLeader.groupId = groupId;

	            var items = data;
	            for (var i = 0; i < items.length; i++) {
	                var leader = items[i];
	                var person = leader.COM_Contact;
	                var l = {};
	                l.name = leader.Title;
	                l.title = person.Title;
	                l.picUrl = picUrlTemplate + person.UserName;
	                leaders.push(l);
	            }
	            groupLeader.leaders = leaders;
	            defer.resolve(groupLeader);
	        });

	        return defer.promise;
	    }
	}]);

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	'use strict';

	//import pnp from "sp-pnp-js";
	//import { Web } from "sp-pnp-js/lib/sharepoint/webs";

	var myApp = angular.module('compassionIntranet');

	myApp.service('relatedNewsService', function ($q, $http, COM_CONFIG) {

	    var depNews = function depNews(page) {
	        var eventQuery = "";
	        var contentType = "";
	        var category = "";
	        var x = page.ContentType;
	        if (x.indexOf('Article') > 0) {
	            //set news content type
	            contentType = " ContentTypeId:0x010100C568DB52D9D0A14D9B2FDCC96666E9F2007948130EC3DB064584E219954237AF3900242457EFB8B24247815D688C526CD44D0017899C3E9B390F4E9BD82B8F03AFD6E6* ";
	            category = " RefinableString15: '" + page.newsCategory + "'";
	        }

	        //specify query variables
	        var rootNews = " Path:" + _spPageContextInfo.siteAbsoluteUrl + "/news";

	        var defer = $q.defer();

	        $pnp.sp.search({
	            Querytext: '' + contentType + 'AND' + category + ' ' + rootNews + '',
	            SelectProperties: ['RefinableString1', 'RefinableString00', 'RefinableDate00', 'RefinableDate01', 'RefinableDate02', 'Path', 'Title', 'ArticleByLineOWSTEXT', 'ContentType'],
	            TrimDuplicates: 'false',
	            RowLimit: 3,
	            SortList: [{
	                'Property': 'RefinableDate01',
	                'Direction': '1'
	            }]

	        }).then(function (data) {

	            var items = data.PrimarySearchResults;
	            items = items.filter(function (item) {
	                //filter out current page
	                var pageTitle = page.Title;
	                if (pageTitle != item.Title) return item;
	            });
	            //create array of objects
	            items = items.map(createObject);

	            defer.resolve(items);
	        });
	        return defer.promise;
	    };

	    var getPage = function getPage() {

	        var defer = $q.defer();

	        var pageTitle = $(".page-title").text();
	        var rootNews = _spPageContextInfo.siteAbsoluteUrl + "/news";
	        var path = " Path:" + "" + rootNews + "";
	        $pnp.sp.search({
	            Querytext: 'Title= "' + pageTitle + '" ' + path + '',
	            SelectProperties: ['RefinableString10', 'RefinableString09', 'RefinableString100', 'RefinableString13', 'Path', 'Title', 'ArticleByLineOWSTEXT', 'ContentType'],
	            TrimDuplicates: 'false',
	            RowLimit: 3,
	            SortList: [{
	                'Property': 'RefinableDate01',
	                'Direction': '0'
	            }]

	        }).then(function (data) {

	            var items = data.PrimarySearchResults[0];
	            if (items.RefinableString15) {

	                items.newsCategory = items.RefinableString15;
	            }

	            defer.resolve(items);
	        });

	        return defer.promise;
	    };

	    this.getData = function () {

	        var defer = $q.defer();
	        getPage().then(function (page) {
	            depNews(page).then(function (items) {

	                defer.resolve(items);
	            });
	        });
	        return defer.promise;
	    };
	});

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	//import pnp from "sp-pnp-js";
	//import { Web } from "sp-pnp-js/lib/sharepoint/webs";
	'use strict';

	angular.module('compassionIntranet').service('employeeAnnouncementService', ['$http', '$q', 'COM_CONFIG', 'storage', 'common', function ($http, $q, COM_CONFIG, storage, common) {
	    var ctrl = this;
	    var userBookmarkKey = 'E5A445DB-8D84-4DC5-AFE4-779DCC86AED6' + _spPageContextInfo.userId;

	    // clear local storage if url param is detected
	    checkForClearStatement();
	    // ensure Promise for pnp is loaded prior to using pnp module
	    ES6Promise.polyfill();

	    // set default expiration at 24 hours
	    ctrl.expirationDuration = 24;
	    ctrl.getMyBookmarks = function (userId) {
	        var defer = $q.defer();
	        getUserBookmarkItems(userId).then(function (bookmarks) {
	            var bks = [];
	            for (var i = 0; i < bookmarks.length; i++) {
	                var b = bookmarks[i];
	                var bk = {};
	                bk.id = b.Id;
	                bk.title = b.Title;
	                bk.url = b.COM_BookmarkUrl;
	                bk.userId = b.COM_ToolbarUserId;
	                bks.push(bk);
	            }
	            defer.resolve(bks);
	        });
	        return defer.promise;
	    };
	    ctrl.addMyBookmark = function (userId, title, url) {
	        var defer = $q.defer();
	        addUserBookmark(userId, title, url).then(function (bookmark) {
	            storage.remove(userBookmarkKey);
	            defer.resolve(bookmark);
	        });
	        return defer.promise;
	    };
	    ctrl.updateUserBookmark = function (userTool) {
	        var defer = $q.defer();
	        updateUserTool(userTool).then(function (data) {
	            storage.remove(userBookmarkKey);
	            defer.resolve(data);
	        });
	        return defer.promise;
	    };
	    ctrl.removeMyBookmark = function (id) {
	        var defer = $q.defer();
	        deleteUserTool(id).then(function (tools) {
	            storage.remove(userBookmarkKey);
	            defer.resolve(tools);
	        });
	        return defer.promise;
	    };
	    function getUserBookmarkItems(userId) {
	        var defer = $q.defer();
	        var local = storage.get(userBookmarkKey);
	        if (local == null) {
	            local = {};
	            local.isExpired = true;
	        }
	        if (!local.isExpired) defer.resolve(local);else {
	            var web = new $pnp.Web(COM_CONFIG.rootWeb);
	            web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.filter("COM_ToolbarUser eq '" + userId + "'").get().then(function (data) {
	                defer.resolve(data);
	            });
	        }
	        return defer.promise;
	    }
	    function addUserBookmark(userId, title, url) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.add({
	            COM_ToolbarUserId: userId,
	            COM_BookmarkUrl: url,
	            Title: title
	        }).then(function (item) {
	            var bk = {};
	            bk.id = item.data.Id;
	            bk.title = item.data.Title;
	            bk.url = item.data.COM_BookmarkUrl;
	            bk.userId = item.data.COM_ToolbarUserId;
	            defer.resolve(bk);
	        });

	        return defer.promise;
	    }
	    function updateUserTool(userBookmark) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        $pnp.sp.web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.getById(userBookmark.id).update({
	            COM_ToolbarUserId: userBookmark.userId,
	            COM_BookmarkUrl: userBookmark.url,
	            Title: userBookmark.title
	        }).then(function (r) {
	            defer.resolve(r);
	        });
	        return defer.promise;
	    }
	    function deleteUserTool(userBookmarkId) {
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.userBookmarks).items.getById(userBookmarkId).delete().then(function (item) {
	            defer.resolve(true);
	        });
	        return defer.promise;
	    }
	    function checkForClearStatement() {
	        if (common.getUrlParamByName('clearMyBookmarks') == 'true') storage.remove(userBookmarkKey);
	    }
	    function formatAppTools(apps) {
	        var nullSortOrder = _.findIndex(apps, function (a) {
	            return a.sortOrder == null;
	        }) != -1;
	        for (var i = 0; i < apps.length; i++) {
	            var app = apps[i];
	            if (app.sortOrder == null) {
	                nullSortOrder = true;
	                apps[i].sortOrder = i + 1;
	            } else if (nullSortOrder) apps[i].sortOrder = i + 1;
	        }
	        return _.sortBy(apps, 'sortOrder');
	    }
	}]);

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('compassionIntranet').service('navigationService', ['$http', '$q', 'COM_CONFIG', 'common', 'storage', function ($http, $q, COM_CONFIG, common, storage) {
	    var ctrl = this;
	    var navKey = 'DE783DB7-A21E-4372-BB64-B193DEB85CD3';
	    var delveUrl = '';
	    // clear local storage if url param is detected
	    common.checkForClearStatement('clearNavNodes', navKey);

	    // set default expiration at 0 hours
	    ctrl.expirationDuration = 0;
	    ctrl.getAllNodes = function () {
	        var defer = $q.defer();
	        var local = storage.get(navKey);
	        if (local == null) {
	            local = {};
	            local.isExpired = true;
	        }
	        if (!local.isExpired) defer.resolve(local);else {
	            defer.resolve(getNavigationNodes());
	        }

	        return defer.promise;
	    };
	    function getNavigationNodes() {
	        // ensure Promise for pnp is loaded prior to using pnp module
	        ES6Promise.polyfill();
	        var defer = $q.defer();
	        var web = new $pnp.Web(COM_CONFIG.rootWeb);
	        web.lists.getByTitle(COM_CONFIG.lists.navigation).items.get().then(function (data) {
	            var nodes = [];
	            for (var i = 0; i < data.length; i++) {
	                var node = {};
	                var n = data[i];
	                node.url = n.COM_NavNodeUrl.Url;
	                node.title = n.Title;
	                nodes.push(node);
	            }
	            storage.set(navKey, nodes, 0);
	            defer.resolve(nodes);
	        });

	        return defer.promise;
	    }
	}]);

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    angular.module('compassionIntranet').directive('modal', Directive);

	    function Directive(modalService) {
	        return {
	            link: function link(scope, element, attrs) {
	                // ensure id attribute exists
	                if (!attrs.id) {
	                    console.error('modal must have an id');
	                    return;
	                }

	                // move element to bottom of page (just before </body>) so it can be displayed above everything else
	                $(element).appendTo('body');

	                // close modal on background click
	                $(element).on('click', function (e) {
	                    var target = $(e.target);
	                    if (!target.closest('.modal-body').length) {
	                        scope.$evalAsync(Close);
	                    }
	                });

	                // add self (this modal instance) to the modal service so it's accessible from controllers
	                var modal = {
	                    id: attrs.id,
	                    open: Open,
	                    close: Close
	                };
	                modalService.Add(modal);

	                // remove self from modal service when directive is destroyed
	                scope.$on('$destroy', function () {
	                    modalService.Remove(attrs.id);
	                    $(element).remove();
	                });

	                // open modal
	                function Open() {
	                    $(element).show();
	                    $(element).addClass('modal-open');
	                }

	                // close modal
	                function Close() {
	                    $(element).hide();
	                    $(element).removeClass('modal-open');
	                }
	            }
	        };
	    }
	})();

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'uiHelper',
	    firstNameId = 'ci-user-first-name';

	myApp.controller(controllerName, ['$scope', 'COM_CONFIG', function ($scope, COM_CONFIG) {
	    var userDisplayName = _spPageContextInfo.userDisplayName,
	        userId = _spPageContextInfo.userId;
	    var userFirstName = getFirstName(userDisplayName);
	    var userLastName = getLastName(userDisplayName);
	    //Setup Responsive Variables
	    var isMobile = "",
	        isTablet = "",
	        isDesktop = "";

	    $scope.init = function () {
	        addFirstNameToWelcomeMessage(userFirstName);
	        $(window).resize(processWindowSize);
	        processWindowSize();
	    };
	    //check window size and setup functions
	    function processWindowSize() {
	        var ua = window.navigator.userAgent;
	        var msie = ua.indexOf("MSIE");

	        if (msie > 0) // If Internet Explorer
	            {
	                var width = window.innerWidth;
	            } else // If another browser
	            {
	                var width = $(window).width();
	            }

	        if (width >= 991) {
	            isMobile = false;
	            isTablet = false;
	            isDesktop = true;
	        } else if (width >= 768) {
	            isTablet = true;
	        } else {
	            isMobile = true;
	            isTablet = false;
	            isDesktop = false;
	        }

	        //setup functions that need to be ran on resize
	        rightRailHeight();
	    } //processWindowSize
	    function rightRailHeight() {
	        setTimeout(function () {
	            /* not sure what $rightRail is...ask Bartke
	            $rightRail = $('.main-right-rail');
	            $rightRailInitial = $rightRail.height();
	            //RESET HEIGHT BEFORE SETTING SO THAT CONTAINER DOESNT INCLUDE IT.
	              if (isDesktop === true) {
	                var mainContainerHeight = $('.main-left-content').outerHeight(true);
	                if ($rightRailInitial < mainContainerHeight) {
	                    $rightRail.css('height', mainContainerHeight);
	                } else {
	                    $rightRail.css('height', $rightRailInitial);
	                }
	            } else {
	                $rightRail.css('height', '');
	                $rightRail.css('height', 'auto');
	            }
	            */
	        }, 2000);
	    }
	    function addFirstNameToWelcomeMessage(firstName) {
	        $('#' + firstNameId).text(firstName);
	    }
	    function getFirstName(fullName) {
	        var names = fullName.split(' ');
	        if (names.length > 0) return names[0];else return '';
	    }
	    function getLastName(fullName) {
	        var names = fullName.split(' ');
	        if (names.length > 1) return names[1];else return '';
	    }
	}]);

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'myRssFeedsCtrl';

	myApp.controller(controllerName, ['$scope', 'rssFeedService', 'COM_CONFIG', function ($scope, rssFeedService, COM_CONFIG) {
	    var ctrl = this;
	    this.$onInit = function () {
	        var userId = _spPageContextInfo.userId;
	        var articleLimit = $scope.ctrl.articlelimit != null ? $scope.ctrl.articlelimit : 5;
	        rssFeedService.getMyRssFeeds(userId, articleLimit).then(function (response) {
	            ctrl.myFeeds = response;
	        });
	    };
	}]).component('myRssFeeds', {
	    template: __webpack_require__(16),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    bindings: {
	        articlelimit: '@'
	    }
	});

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	module.exports = "<div>My RSS Feeds</div>\r\n<rss-feeds></rss-feeds>\r\n<rss-feed-manager></rss-feed-manager>\r\n";

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'toolbarCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'modalService', 'appService', 'bookmarkService', 'COM_CONFIG', function ($scope, common, modalService, appService, bookmarkService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    var isToolbarDirty = false;
	    ctrl.myTools = [];
	    ctrl.myToolsFromDb = [];
	    ctrl.toolbarSelectorId = 'ci-toolbar-selector', ctrl.toolbarContainerId = 'ci-toolbar-container', ctrl.toolbarContentClassName = 'toolbar-content';

	    ctrl.selectedTabId = 'ci-apps';
	    this.$onInit = function () {
	        appService.getMyApps(userId).then(function (response) {
	            ctrl.myAppsFromDb = response;
	            ctrl.myApps = angular.copy(response);
	        });
	        bookmarkService.getMyBookmarks(userId).then(function (response) {
	            ctrl.myBookmarks = angular.copy(response);
	            ctrl.myBookmarksFromDb = response;
	        });
	    };
	    ctrl.select = function (tabId) {
	        if (ctrl.selectedTabId === tabId) return;
	        ctrl.selectedTabId = tabId;
	    };
	}]).component('myToolbar', {
	    template: __webpack_require__(18),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	module.exports = "<section id=\"ci-toolbar-container\" class=\"nav-toolbar\">\r\n    <div id=\"ci-toolbar\" class=\"row\">\r\n        <div class=\"col-xs-8 col-xs-offset-2\">\r\n            <ul id=\"ci-toolbar-selector\" class=\"nav-toolbar nav-tabs\">\r\n                <div class=\"manage-toolbar\">\r\n                    <toolbar-manager class=\"ng-isolate-scope\">\r\n                        <div>\r\n                            <a ng-click=\"ctrl.openManageModal()\">\r\n                                <i class=\"fa fa-cog\" aria-hidden=\"true\"></i>\r\n                                Manage\r\n                            </a>\r\n                        </div>\r\n                    </toolbar-manager>\r\n                </div>\r\n                <li class=\"nav-item\" ng-class=\"{active:ctrl.isSelected('ci-apps')}\">\r\n                    <a ng-click=\"ctrl.select('ci-apps')\" href=\"javascript: void(0);\">apps + tools</a>\r\n                </li>\r\n                <li class=\"nav-item\" ng-class=\"{active:ctrl.isSelected('ci-documents')}\">\r\n                    <a ng-click=\"ctrl.select('ci-documents')\" href=\"javascript: void(0);\">documents</a>\r\n                </li>\r\n                <li class=\"nav-item\" ng-class=\"{active:ctrl.isSelected('ci-bookmarks')}\">\r\n                    <a ng-click=\"ctrl.select('ci-bookmarks')\" href=\"javascript: void(0);\">bookmarks</a>\r\n                </li>\r\n                <li class=\"nav-item\" ng-class=\"{active:ctrl.isSelected('ci-sites')}\">\r\n                    <a ng-click=\"ctrl.select('ci-sites')\" href=\"javascript: void(0);\">project sites</a>\r\n                </li>\r\n            </ul>\r\n            <div class=\"toolbar-content\" id=\"ci-apps\" ng-show=\"ctrl.selectedTabId == 'ci-apps'\">\r\n                <my-apps></my-apps>\r\n            </div>\r\n            <div class=\"toolbar-content\" id=\"ci-documents\" ng-show=\"ctrl.selectedTabId == 'ci-documents'\">\r\n                <h3>Recent Documents</h3>\r\n                <my-documents></my-documents>\r\n            </div>\r\n            <div class=\"toolbar-content\" id=\"ci-bookmarks\" ng-show=\"ctrl.selectedTabId == 'ci-bookmarks'\">\r\n                <my-bookmarks></my-bookmarks>\r\n            </div>\r\n            <div class=\"toolbar-content\" id=\"ci-sites\" ng-show=\"ctrl.selectedTabId == 'ci-sites'\">\r\n                <ul>\r\n                    <li><a>site 1</a></li>\r\n                </ul>\r\n            </div>            \r\n        </div>\r\n        <div class=\"col-xs-8 col-xs-offset-2\">\r\n            <toolbar-manager></toolbar-manager>\r\n        </div>\r\n    </div>\r\n</section>";

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'bookmarkCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'modalService', 'bookmarkService', 'COM_CONFIG', function ($scope, common, modalService, bookmarkService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    var isDirty = false;

	    ctrl.enableSaveButton = function () {
	        if (isDirty) $scope.systemMessage = '';
	        return !isDirty;
	    };
	    this.$onInit = function () {
	        bookmarkService.getMyBookmarks(userId).then(function (response) {
	            ctrl.myBookmarks = angular.copy(response);
	            ctrl.myBookmarksFromDb = response;
	            getSortOrderLimits();
	        });
	    };
	    $scope.$parent.$watch('ctrl.myBookmarks', function (newVal, oldVal, scope) {
	        if (newVal == null) return;
	        ctrl.myBookmarks = newVal;
	        ctrl.myBookmarksFromDb = scope.ctrl.myBookmarksFromDb;
	    });
	    /*
	    function updateSortOrder(bookmark, oldOrder) {
	        isDirty = true;
	        var bookmarks = ctrl.myBookmarks;
	        var newOrder = bookmark.sortOrder;
	        if (oldOrder < newOrder) {
	            for (var i = oldOrder - 1; i < newOrder; i++) {
	                var t = bookmarks[i];
	                if (i == oldOrder - 1) {
	                    bookmarks[i].sortOrder = bookmark.sortOrder;
	                }
	                else if (i == newOrder - 1) {
	                    bookmarks[i].sortOrder = t.sortOrder - 1
	                }
	                else {
	                    bookmarks[i].sortOrder = t.sortOrder - 1;
	                }
	            }
	        }
	        else if (newOrder < oldOrder) {
	            for (var i = newOrder - 1; i < oldOrder; i++) {
	                var t = bookmarks[i];
	                if (i == newOrder - 1) {
	                    bookmarks[i].sortOrder = t.sortOrder + 1;
	                }
	                else if (i == oldOrder - 1) {
	                    bookmarks[i].sortOrder = bookmark.sortOrder;
	                }
	                else {
	                    bookmarks[i].sortOrder = t.sortOrder + 1;
	                }
	            }
	        }
	        ctrl.myBookmarks = _.sortBy(bookmarks, 'sortOrder');
	    }
	    function saveMyBookmarksSortOrder() {
	        for (var i = 0; i < ctrl.myBookmarks.length; i++) {
	            var bk = $scctrlope.myBookmarks[i];
	            bookmarkService.updateUserBookmark(bk);
	        }
	        ctrl.myBookmarksFromDb = angular.copy(ctrl.myBookmarks);
	        isDirty = false;
	        $scope.systemMessage = 'Success';
	    }
	    
	    function saveMyBookmarks() {
	        var bookmarks = ctrl.myBookmarks;
	        var dbBookmarks = ctrl.myBookmarksFromDb;
	        var bookmarksToAdd = _.where(bookmarks, { id: -1 });
	        var fullBookmarks = _.filter(bookmarks, function (t) { return t.id != -1; });
	        var bookmarksToDelete = _.difference(fullBookmarks, bookmarks);
	          for (var i = 0; i < bookmarksToAdd.length; i++) {
	            var bk = bookmarksToAdd[i];
	            bookmarkService.addMyBookmark(bk);
	        }
	        for (var i = 0; i < bookmarksToDelete.length; i++) {
	            var bk = bookmarksToDelete[i];
	            bookmarkService.removeMyBookmark(bk.id);
	        }
	        bookmarkService.getMyBookmarks(userId).then(function (response) {
	            ctrl.myBookmarks = response;
	            ctrl.myBookmarksFromDb = angular.copy(response);
	            getSortOrderLimits();
	            isDirty = false;
	            $scope.systemMessage = 'Success';
	        });
	    }
	    */
	    function getSortOrderLimits() {
	        var count = ctrl.myBookmarks.length;
	        var response = [];
	        for (var i = 1; i <= count; i++) {
	            response.push(i);
	        }
	        $scope.myBookmarksSortList = response;
	    }
	    /*
	    function openModal(id) {
	        modalService.Open(id);
	    }
	    function closeModal(id) {
	        modalService.Close(id);
	    }
	    */
	}]).component('myBookmarks', {
	    template: __webpack_require__(20),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = "<ul ng-repeat=\"bk in ctrl.myBookmarks track by bk.id\">\r\n    <li>\r\n        <a ng-href=\"{{ bk.url }}\">\r\n            <div>{{ bk.title }}</div>                        \r\n        </a>                    \r\n    </li>\r\n</ul>\r\n    ";

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'myAppsCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'appService', 'COM_CONFIG', function ($scope, common, appService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    var isToolbarDirty = false;

	    $scope.$parent.$watch('ctrl', function (newVal, oldVal, scope) {
	        ctrl.myApps = newVal.myApps;
	        ctrl.myAppsFromDb = newVal.myAppsFromDb;
	    });
	    this.$onInit = function () {
	        ctrl.myApps = $scope.$parent.ctrl.myApps;
	    };
	}]).component('myApps', {
	    template: __webpack_require__(22),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    require: {
	        parent: '^myToolbar'
	    }
	});

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	module.exports = "<ul ng-repeat=\"app in ctrl.myApps\">\r\n    <li>\r\n        <a ng-href=\"{{ app.iconUrl }}\">\r\n            <img ng-src=\"{{ app.iconUrl }}\" />\r\n            <div>{{ app.title }}</div>\r\n        </a>\r\n    </li>\r\n</ul>";

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'myDocumentsCtrl';

	myApp.controller(controllerName, ['$scope', 'documentService', 'COM_CONFIG', function ($scope, documentService, COM_CONFIG) {
	    var userId = _spPageContextInfo.userId,
	        userDisplayName = _spPageContextInfo.userDisplayName;

	    this.$onInit = function () {
	        documentService.getMyDocuments(userDisplayName).then(function (response) {
	            ctrl.myDocuments = response;
	        });
	    };
	}]).component('myDocuments', {
	    template: __webpack_require__(24),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	module.exports = "<ul>\r\n    <li ng-repeat=\"doc in ctrl.myDocuments\">\r\n        <a ng-href=\"{{ doc.url }}\">\r\n            <div>{{ doc.title }}</div>\r\n        </a>\r\n    </li>\r\n</ul>";

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'rssFeedsCtrl';

	myApp.controller(controllerName, ['$scope', 'rssFeedService', 'COM_CONFIG', function ($scope, rssFeedService, COM_CONFIG) {
	    var ctrl = this;
	    $scope.$parent.$watch('ctrl.myFeeds', function (newVal, oldVal, scope) {
	        if (newVal == null) return;
	        ctrl.myFeeds = newVal;
	    });
	}]).component('rssFeeds', {
	    template: __webpack_require__(26),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    bindings: {
	        articlelimit: '@'
	    }
	});

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	module.exports = "<div ng-repeat=\"item in ctrl.myFeeds\">\r\n    <h3>{{ item.title }}</h3>\r\n    <ul ng-repeat=\"article in item.articles\">\r\n        <li>\r\n            <a href=\"{{ article.guid }}\">{{ article.title }}</a>\r\n            <div>{{ article.publishedSpanString }}</div>\r\n        </li>\r\n    </ul>\r\n</div>";

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'toolbarManagerCtrl';

	myApp.controller(controllerName, ['$scope', '$q', 'common', 'modalService', 'appService', 'bookmarkService', 'COM_CONFIG', function ($scope, $q, common, modalService, appService, bookmarkService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    ctrl.isToolbarDirty = false;
	    ctrl.manageBookmarkId = 'ci-bookmarks-manage', ctrl.confirmDeleteBookmarkId = 'ci-bookmarks-confirm-delete';

	    $scope.$parent.$watch('ctrl.myApps', function (newVal, oldVal, scope) {
	        if (newVal == null) return;
	        ctrl.myApps = newVal;
	        ctrl.myAppsFromDb = scope.ctrl.myAppsFromDb;
	        getSortOrderLimits();
	    });
	    $scope.$parent.$watch('ctrl.myBookmarks', function (newVal, oldVal, scope) {
	        if (newVal == null) return;
	        ctrl.myBookmarks = newVal;
	        ctrl.myBookmarksFromDb = scope.ctrl.myBookmarksFromDb;
	    });
	    ctrl.enableSaveBookmarkButton = enableSaveBookmarkButton;
	    ctrl.newBookmark = {};
	    ctrl.openModal = openModal;
	    ctrl.closeModal = closeModal;
	    ctrl.saveMyApps = saveMyApps;
	    ctrl.openManageModal = openManageModal;
	    ctrl.saveMyAppsSortOrder = saveMyAppsSortOrder;
	    ctrl.updateSortOrder = updateSortOrder;
	    ctrl.saveMyNewBookmark = saveMyNewBookmark;
	    ctrl.saveMyBookmarks = saveMyBookmarks;
	    ctrl.removeMyBookmark = removeMyBookmark;
	    ctrl.confirmDeletion = confirmDeletion;
	    ctrl.enableAddNew = false;
	    ctrl.addMyBookmark = function () {
	        ctrl.enableAddNew = true;
	        $scope.systemMessage = '';
	    };
	    ctrl.enableSaveButton = function () {
	        if (ctrl.isToolbarDirty) $scope.systemMessage = '';
	        return !ctrl.isToolbarDirty;
	    };

	    this.$onInit = function () {
	        ctrl.myApps = $scope.$parent.ctrl.myApps;
	        appService.getAllApps().then(function (response) {
	            ctrl.allApps = response;
	        });
	    };
	    $scope.myAppsSortList = [];
	    $scope.existsAppInMyApps = function (appId) {
	        if (!appId) return false;
	        var item = _.find(ctrl.myApps, function (i) {
	            return i.appId == appId;
	        });
	        return item != null;
	    };
	    $scope.toggleSelection = function (id) {
	        ctrl.isToolbarDirty = true;
	        var item = _.find(ctrl.myApps, function (i) {
	            return i.toolId == id;
	        });
	        if (item == null) {
	            var tool = _.find(ctrl.allApps, function (i) {
	                return i.id == id;
	            });
	            tool.toolId = tool.id;
	            tool.id = -1;
	            ctrl.myApps.push(tool);
	        } else {
	            var currentTools = ctrl.myApps;
	            ctrl.myApps = _.without(currentTools, _.findWhere(currentTools, {
	                toolId: id
	            }));
	        }
	    };
	    function confirmDeletion(bookmark) {
	        $scope.bookmarkIdToDelete = bookmark.id;
	        closeModal(ctrl.manageBookmarkId);
	        openModal(ctrl.confirmDeleteBookmarkId);
	    }
	    function enableSaveBookmarkButton() {
	        var isBookmarkValid = ctrl.newBookmark.url != null ? common.isUrl(ctrl.newBookmark.url) : false;
	        var isTitleValid = false;
	        if (ctrl.newBookmark.title) isTitleValid = ctrl.newBookmark.title !== '';

	        return !(ctrl.isToolbarDirty && isBookmarkValid && isTitleValid);
	    }
	    function updateSortOrder(tool, oldOrder) {
	        ctrl.isToolbarDirty = true;
	        var apps = ctrl.myApps;
	        var newOrder = tool.sortOrder;
	        if (oldOrder < newOrder) {
	            for (var i = oldOrder - 1; i < newOrder; i++) {
	                var t = apps[i];
	                if (i == oldOrder - 1) {
	                    apps[i].sortOrder = tool.sortOrder;
	                } else if (i == newOrder - 1) {
	                    apps[i].sortOrder = t.sortOrder - 1;
	                } else {
	                    apps[i].sortOrder = t.sortOrder - 1;
	                }
	            }
	        } else if (newOrder < oldOrder) {
	            for (var i = newOrder - 1; i < oldOrder; i++) {
	                var t = apps[i];
	                if (i == newOrder - 1) {
	                    apps[i].sortOrder = t.sortOrder + 1;
	                } else if (i == oldOrder - 1) {
	                    apps[i].sortOrder = tool.sortOrder;
	                } else {
	                    apps[i].sortOrder = t.sortOrder + 1;
	                }
	            }
	        }
	        ctrl.myApps = _.sortBy(apps, 'sortOrder');
	    }
	    function saveMyAppsSortOrder() {
	        for (var i = 0; i < ctrl.myApps.length; i++) {
	            var bk = ctrl.myApps[i];
	            appService.updateUserApp(bk);
	        }
	        ctrl.myAppsFromDb = angular.copy(ctrl.myBookmarks);
	        isToolbarDirty = false;
	        $scope.systemMessage = 'Success';
	    }
	    function removeMyBookmark() {
	        if (!$scope.bookmarkIdToDelete) {
	            return;
	        }
	        var bookmarkId = $scope.bookmarkIdToDelete;
	        bookmarkService.removeMyBookmark(bookmarkId).then(function (response) {
	            var myBookmarks = _.filter(ctrl.myBookmarks, function (bk) {
	                return bk.id !== bookmarkId;
	            });
	            ctrl.myBookmarks = angular.copy(myBookmarks);
	            ctrl.myBookmarksFromDb = myBookmarks;
	            $scope.$parent.ctrl.myBookmarks = ctrl.myBookmarks;
	            $scope.$parent.ctrl.myBookmarksFromDb = ctrl.myBookmarksFromDb;

	            getSortOrderLimits();
	            $scope.bookmarkIdToDelete = null;
	            closeModal(ctrl.confirmDeleteBookmarkId);
	            openModal(ctrl.manageBookmarkId);
	            $scope.systemMessage = 'Successfully deleted the bookmark';
	        });
	    }
	    function saveMyNewBookmark() {
	        var title = ctrl.newBookmark.title;
	        var url = ctrl.newBookmark.url;
	        bookmarkService.addMyBookmark(userId, title, url).then(function (data) {
	            ctrl.enableAddNew = false;
	            ctrl.isToolbarDirty = false;
	            ctrl.systemMessage = 'Success adding bookmark';
	            /*
	            var newBookmark = {};
	            newBookmark.title = title;
	            newBookmark.url = url;
	            newBookmark.id = 
	            */
	            $scope.$parent.ctrl.myBookmarks.push(data);
	            ctrl.newBookmark = null;
	        });
	    }
	    function saveMyBookmarks() {
	        var promises = [];
	        for (var i = 0; i < ctrl.myBookmarks.length; i++) {
	            var p = bookmarkService.updateUserBookmark(ctrl.myBookmarks[i]);
	            promises.push(p);
	        }
	        $q.all(promises).then(function (response) {
	            bookmarkService.getMyBookmarks(userId).then(function (data) {
	                ctrl.isToolbarDirty = false;
	                $scope.systemMessage = 'Success updating bookmarks';
	                $scope.$parent.ctrl.myBookmarks = data;
	            });
	        });
	    }
	    function saveMyApps() {
	        var apps = ctrl.myApps;
	        var dbApps = ctrl.myAppsFromDb;
	        var appsToAdd = _.where(apps, { id: -1 });
	        var fullTools = _.filter(apps, function (t) {
	            return t.id != -1;
	        });
	        var appsToDelete = _.difference(fullTools, apps);

	        for (var i = 0; i < appsToAdd.length; i++) {
	            var tool = appsToAdd[i];
	            appService.addMyTool(userId, tool.toolId);
	        }
	        for (var i = 0; i < appsToDelete.length; i++) {
	            var tool = appsToDelete[i];
	            appService.removeMyTool(tool.id);
	        }
	        appService.getMyApps(userId).then(function (response) {
	            ctrl.myAppsFromDb = response;
	            ctrl.myApps = angular.copy(response);
	            getSortOrderLimits();
	            ctrl.isToolbarDirty = false;
	            ctrl.systemMessage = 'Success';
	        });
	    }
	    function getSortOrderLimits() {
	        if (ctrl.myApps == null) return;
	        var myAppsCount = ctrl.myApps.length;
	        var response = [];
	        for (var i = 1; i <= myAppsCount; i++) {
	            response.push(i);
	        }
	        $scope.myAppsSortList = response;
	    }
	    function openManageModal() {
	        var selectedTablId = $scope.$parent.ctrl.selectedTabId;
	        modalService.Open(selectedTablId + '-manage');
	    }
	    function openModal(id) {
	        modalService.Open(id);
	    }
	    function closeModal(id) {
	        modalService.Close(id);
	    }
	}]).component('toolbarManager', {
	    template: __webpack_require__(28),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    require: {
	        parent: '^myToolbar'
	    }
	});

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	module.exports = "<div><a ng-click=\"ctrl.openManageModal()\">Manage</a></div>\r\n<modal id=\"ci-apps-manage\">\r\n    <div class=\"ci-modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Manage My Tools / Apps</h1>\r\n            <h3>Available Tools / Apps</h3>\r\n            <ul>\r\n                <li ng-repeat=\"app in ctrl.allApps track by app.id\">\r\n                    <input type=\"checkbox\" ng-click=\"toggleSelection(app.id)\" value=\"{{app.id}}\" ng-checked=\"existsAppInMyApps(app.id)\" />{{app.title}}\r\n                </li>\r\n            </ul>\r\n\r\n            <button ng-click=\"ctrl.saveMyApps();\" ng-disabled=\"ctrl.enableSaveButton();\">Save</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-apps-manage'); ctrl.openModal('ci-apps-manage-sort');\">Edit Sort Order</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-apps-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>\r\n<modal id=\"ci-apps-manage-sort\">\r\n    <div class=\"ci-modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Manage My Tools / Apps Sort Order</h1>\r\n            <ul>\r\n                <li ng-repeat=\"app in ctrl.myApps track by app.id\">\r\n                    {{app.title}}\r\n                    <select ng-model=\"app.sortOrder\" ng-change=\"ctrl.updateSortOrder(app, {{app.sortOrder}});\">\r\n                        <option ng-repeat=\"sort in myAppsSortList\" ng-value=\"{{sort}}\">{{sort}}</option>\r\n                    </select>\r\n                </li>\r\n            </ul>\r\n\r\n            <button ng-click=\"ctrl.saveMyAppsSortOrder();\" ng-disabled=\"ctrl.enableSaveButton();\">Save</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-apps-manage-sort'); ctrl.openModal('ci-apps-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>\r\n<modal id=\"ci-bookmarks-manage\">\r\n    <div class=\"ci-modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Manage My Bookmarks</h1>\r\n            <ul>\r\n                <li ng-repeat=\"bk in ctrl.myBookmarks track by bk.id\">\r\n                    <input type=\"hidden\" ng-model=\"bk.id\" />\r\n                    <input type=\"text\" ng-model=\"bk.title\" ng-change=\"ctrl.isToolbarDirty = true\" />\r\n                    <input type=\"text\" ng-model=\"bk.url\" ng-change=\"ctrl.isToolbarDirty = true\" />\r\n                    <i class=\"fa fa-trash\" aria-hidden=\"true\" ng-click=\"ctrl.confirmDeletion(bk);\"></i>\r\n                </li>\r\n            </ul>\r\n            <div ng-show=\"ctrl.enableAddNew\">\r\n                <label for=\"bookmark-title\">Title</label>\r\n                <input type=\"text\" id=\"bookmark-title\" ng-model=\"ctrl.newBookmark.title\" ng-change=\"ctrl.isToolbarDirty = true\" />\r\n                <label for=\"bookmark-url\">Bookmark Url</label>\r\n                <input type=\"text\" id=\"bookmark-url\" ng-model=\"ctrl.newBookmark.url\" ng-change=\"ctrl.isToolbarDirty = true\" />\r\n                <button ng-click=\"ctrl.saveMyNewBookmark();\" ng-disabled=\"ctrl.enableSaveBookmarkButton()\">Save</button>\r\n            </div>\r\n            \r\n            <button ng-click=\"ctrl.addMyBookmark();\">Add New</button>\r\n            <!--\r\n            <button ng-click=\"ctrl.saveMyBookmarks()\" ng-disabled=\"ctrl.enableSaveButton()\">Save</button>\r\n                -->\r\n            <button ng-click=\"ctrl.closeModal('ci-bookmarks-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>\r\n<modal id=\"ci-bookmarks-confirm-delete\">\r\n    <div class=\"ci-modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Bookmark Deletion Confirmation</h1>\r\n            <p>Please confirm deletion of bookmark.</p>\r\n            <button ng-click=\"ctrl.removeMyBookmark()\">OK</button>\r\n            <button ng-click=\"ctrl.closeModal('ci-bookmarks-confirm-delete');ctrl.openModal('ci-bookmarks-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>";

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'rssFeedManagerCtrl';

	myApp.controller(controllerName, ['$scope', '$q', 'common', 'modalService', 'rssFeedService', 'COM_CONFIG', function ($scope, $q, common, modalService, rssFeedService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    ctrl.isToolbarDirty = false;
	    ctrl.manageBookmarkId = 'ci-rss-feed-manage';

	    ctrl.existsFeedInMyFeeds = existsFeedInMyFeeds;
	    ctrl.saveMyFeeds = saveMyFeeds;
	    ctrl.enableSaveButton = enableSaveButton;
	    ctrl.openManageModal = openManageModal;
	    ctrl.closeModal = closeModal;

	    $scope.$parent.$watch('ctrl.myFeeds', function (newVal, oldVal, scope) {
	        if (newVal == null) return;
	        ctrl.myFeeds = newVal;
	        ctrl.myFeedsFromDb = angular.copy(newVal);
	    });
	    this.$onInit = function () {
	        rssFeedService.getAllRssFeeds().then(function (response) {
	            ctrl.allFeeds = response;
	        });
	    };
	    $scope.toggleSelection = function (id) {
	        ctrl.isToolbarDirty = true;
	        var item = _.find(ctrl.myFeeds, function (i) {
	            return i.id == id;
	        });
	        if (item == null) {
	            var feed = _.find(ctrl.allFeeds, function (i) {
	                return i.id == id;
	            });
	            feed.feedId = feed.id;
	            feed.id = -1;
	            ctrl.myFeeds.push(feed);
	        } else {
	            var currentFeeds = ctrl.myFeeds;
	            ctrl.myFeeds = _.without(currentFeeds, _.findWhere(currentFeeds, {
	                id: id
	            }));
	        }
	    };
	    function saveMyFeeds() {
	        var feeds = ctrl.myFeeds;
	        var dbFeeds = ctrl.myFeedsFromDb;
	        var feedsToAdd = _.where(feeds, { id: -1 });
	        var feedsToDelete = _.filter(dbFeeds, function (a) {
	            return !_.findWhere(feeds, { id: a.id });
	        });
	        var promises = [];
	        for (var i = 0; i < feedsToAdd.length; i++) {
	            var feed = feedsToAdd[i];
	            promises.push(rssFeedService.addMyFeed(userId, feed.feedId));
	        }
	        for (var i = 0; i < feedsToDelete.length; i++) {
	            var feed = feedsToDelete[i];
	            promises.push(rssFeedService.removeMyFeed(feed.id));
	        }
	        $q.all(promises).then(function (response) {
	            rssFeedService.getMyRssFeeds(userId, $scope.$parent.ctrl.articleLimit).then(function (feeds) {
	                $scope.$parent.ctrl.myFeeds = angular.copy(feeds);
	                ctrl.isToolbarDirty = false;
	                ctrl.systemMessage = 'Success';
	            });
	        });
	    }
	    function enableSaveButton() {
	        return !ctrl.isToolbarDirty;
	    }
	    function openManageModal() {
	        modalService.Open(ctrl.manageBookmarkId);
	    }
	    function closeModal(id) {
	        modalService.Close(id);
	    }
	    function existsFeedInMyFeeds(feedId) {
	        if (!feedId) return false;
	        var item = _.find(ctrl.myFeeds, function (i) {
	            return i.feedId == feedId;
	        });
	        return item != null;
	    }
	}]).component('rssFeedManager', {
	    template: __webpack_require__(30),
	    controller: controllerName,
	    controllerAs: 'ctrl',
	    require: {
	        parent: '^myRssFeeds'
	    }
	});

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	module.exports = "<div><a ng-click=\"ctrl.openManageModal()\">Manage</a></div>\r\n<modal id=\"ci-rss-feed-manage\">\r\n    <div class=\"modal\">\r\n        <div class=\"modal-body\">\r\n            <h1>Manage My RSS Feeds</h1>\r\n            <h3>Available RSS Feeds</h3>\r\n            <ul>\r\n                <li ng-repeat=\"feed in ctrl.allFeeds track by feed.id\">\r\n                    <input type=\"checkbox\" ng-click=\"toggleSelection(feed.id)\" value=\"{{feed.id}}\" ng-checked=\"ctrl.existsFeedInMyFeeds(feed.id)\" />{{feed.title}}\r\n                </li>\r\n            </ul>\r\n\r\n            <button ng-click=\"ctrl.saveMyFeeds();\" ng-disabled=\"ctrl.enableSaveButton();\">Save</button>            \r\n            <button ng-click=\"ctrl.closeModal('ci-rss-feed-manage');\">Close</button>\r\n            <span>{{systemMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-background\"></div>\r\n</modal>";

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'groupSummaryCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'groupService', 'COM_CONFIG', function ($scope, common, groupService, COM_CONFIG) {
	    var ctrl = this;
	    var userId = _spPageContextInfo.userId;
	    var closedGroups = [];
	    var openGroups = [];

	    ctrl.toggleSummary = toggleSummary;
	    ctrl.isGroupActive = isGroupActive;

	    this.$onInit = function () {
	        groupService.getGroups().then(function (data) {
	            ctrl.groups = data;
	            for (var i = 0; i < data.length; i++) {
	                var item = data[i];
	                closedGroups.push(item.id);
	            }
	        });
	    };
	    function isGroupActive(id) {
	        var closedIndex = closedGroups.indexOf(id);
	        var openIndex = openGroups.indexOf(id);
	        if (closedIndex == -1 && openIndex > -1) {
	            return true;
	        } else if (openIndex == -1 && closedIndex > -1) {
	            return false;
	        }
	        return false;
	    }
	    function toggleSummary(id) {
	        // if group is closed
	        var closedIndex = closedGroups.indexOf(id);
	        var openIndex = openGroups.indexOf(id);
	        if (closedIndex != -1) {
	            closedGroups.splice(closedIndex, 1);
	            openGroups.push(id);
	        } else if (openIndex != -1) {
	            openGroups.splice(openIndex, 1);
	            closedGroups.push(id);
	        }
	    }
	}]).component('groupSummary', {
	    template: __webpack_require__(32),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = "<section id=\"ci-group-summary-container\">\r\n    <h1>Groups</h1>\r\n    <ul>\r\n        <li ng-repeat=\"group in ctrl.groups track by group.id\">\r\n            <a ng-href=\"javascript:void(0)\" ng-click=\"ctrl.toggleSummary(group.id)\">+</a>\r\n            <h3>{{group.name}}</h3>\r\n            <div class=\"ci-group-summary\" ng-show=\"ctrl.isGroupActive(group.id)\">\r\n                <a ng-href=\"{{group.url}}\">GO TO GROUP ></a>\r\n                <p>{{group.description}}</p>\r\n                <a ng-href=\"{{group.profileUrl}}\">VIEW ORG CHART</a>\r\n                <h4>Leadership</h4>\r\n                <ul>\r\n                    <li ng-repeat=\"leader in group.leaders\">\r\n                        <div>{{leader.name}}</div>\r\n                        <div>{{leader.title}}</div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <input type=\"hidden\" ng-model=\"group.id\" />\r\n        </li>\r\n    </ul>\r\n</section>";

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// import pnp from "sp-pnp-js";
	var ctrlName = "relatedDocCtrl";
	var myApp = angular.module('compassionIntranet');

	myApp.controller(ctrlName, ['$scope', 'relatedDocService', 'COM_CONFIG', function ($scope, relatedDocService, COM_CONFIG) {

	    // var cacheObj = pnp.storage.local;
	    // if (!_CONFIG.useCaching) {
	    //     cacheObj.delete(ctrlName);
	    // }
	    // cacheObj.getOrPut(ctrlName, relatedDocService-service.getData).then(function(data) {
	    relatedDocService.getData().then(function (data) {
	        $scope.documents = COM_CONFIG.rootWeb;

	        if (data.length === 0) {
	            $scope.notFound = "No related documents found";
	        } else if (data[0].contentType === true) {

	            $scope.documents = data;
	        }
	    });
	}]).component('relatedDoc', {
	    template: __webpack_require__(34),
	    controller: ctrlName,
	    controlleras: 'ctrl',
	    bindings: {
	        documentlimit: '@'
	    }
	});

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	module.exports = "<div ng-show=\"Documents\" class=\"trending-stories\">\r\n    <span class=\"line-title\">Related Documents</span>\r\n    <div ng-repeat=\"x in Documents\" class=\"story\">\r\n        <div class=\"reminder-date\">\r\n            <a ng-href=\"{{x.url}}\">\r\n                <h4 class=\"news-title\">{{x.title}}</h4>\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div ng-if=\"notFound\" class=\"trending-stories\">\r\n    <span class=\"line-title\">{{notFound}}</span>\r\n</div>";

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// import pnp from "sp-pnp-js";
	var ctrlName = "relatedNewsCtrl";
	var myApp = angular.module('compassionIntranet');

	myApp.controller(ctrlName, ['$scope', 'relatedNewsService', 'COM_CONFIG', function ($scope, relatedNewsService, COM_CONFIG) {

	    relatedNewsService.getData().then(function (data) {
	        $scope.newsSite = COM_CONFIG.rootWeb + "/news/pages/default.aspx";

	        if (data.length === 0) {
	            $scope.notFound = "No related stories found";
	        } else if (data[0].contentType === true) {
	            $scope.news = data;
	        }
	    });
	}]).component('relatedNews', {
	    template: __webpack_require__(36),
	    controller: ctrlName,
	    controlleras: 'ctrl',
	    bindings: {
	        articlelimit: '@'
	    }
	});

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	module.exports = "<div ng-show=\"News\" class=\"trending-stories\">\r\n    <span class=\"line-title\">Related News</span>\r\n    <div ng-repeat=\"x in news\" class=\"story\">\r\n        <div class=\"reminder-date\">\r\n            <span class=\"news-type\">{{x.category}}</span>\r\n            <a ng-href=\"{{x.url}}\">\r\n                <h4 class=\"news-title\">{{x.title}}</h4>\r\n            </a>\r\n            <span class=\"regular-body numbers\">{{x.publishDate}}</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div ng-if=\"notFound\" class=\"trending-news\">\r\n    <span class=\"line-title\">{{notFound}}</span>\r\n</div>";

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'employeeAnnouncementCtrl';

	myApp.controller(controllerName, ['$scope', 'common', 'appService', 'COM_CONFIG', function ($scope, common, appService, COM_CONFIG) {
	    var ctrl = this;

	    this.$onInit = function () {
	        ctrl.myApps = $scope.$parent.ctrl.myApps;
	    };
	}]).component('employeeAnnouncement', {
	    template: __webpack_require__(38),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	module.exports = "<section>\r\n    <div class=\"ci-employee-announcement-container\">\r\n        <h3>{{ctrl.title}}</h3>\r\n        <p>{{ctrl.message}}</p>\r\n    </div>\r\n</section>";

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var myApp = angular.module('compassionIntranet'),
	    controllerName = 'myDocumentsCtrl';

	myApp.controller(controllerName, ['$scope', 'navigationService', 'COM_CONFIG', function ($scope, navigationService, COM_CONFIG) {
	    var ctrl = this;
	    this.$onInit = function () {
	        navigationService.getAllNodes().then(function (response) {
	            ctrl.navNodes = response;
	        });
	    };
	}]).component('navigation', {
	    template: __webpack_require__(40),
	    controller: controllerName,
	    controllerAs: 'ctrl'
	});

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	module.exports = "<nav>\r\n    <div ng-repeat=\"node in ctrl.navNodes\">\r\n        <a ng-href=\"{{ node.url }}\">\r\n            <div>{{ node.title }}</div>\r\n        </a>\r\n    </div>\r\n</nav>";

/***/ })
/******/ ]);